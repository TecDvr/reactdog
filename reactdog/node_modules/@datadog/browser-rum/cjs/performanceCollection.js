"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_core_1 = require("@datadog/browser-core");
var lifeCycle_1 = require("./lifeCycle");
var resourceUtils_1 = require("./resourceUtils");
function supportPerformanceObject() {
    return window.performance !== undefined && 'getEntries' in performance;
}
function supportPerformanceNavigationTimingEvent() {
    return (window.PerformanceObserver &&
        PerformanceObserver.supportedEntryTypes !== undefined &&
        PerformanceObserver.supportedEntryTypes.includes('navigation'));
}
function startPerformanceCollection(lifeCycle, session) {
    retrieveInitialDocumentResourceTiming(function (timing) {
        handlePerformanceEntries(session, lifeCycle, [timing]);
    });
    if (supportPerformanceObject()) {
        handlePerformanceEntries(session, lifeCycle, performance.getEntries());
    }
    if (window.PerformanceObserver) {
        var observer = new PerformanceObserver(browser_core_1.monitor(function (entries) { return handlePerformanceEntries(session, lifeCycle, entries.getEntries()); }));
        var entryTypes = ['resource', 'navigation', 'longtask'];
        // cf https://github.com/w3c/paint-timing/issues/40
        if (document.visibilityState === 'visible') {
            entryTypes.push('paint');
        }
        observer.observe({ entryTypes: entryTypes });
        if (supportPerformanceObject() && 'addEventListener' in performance) {
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1559377
            performance.addEventListener('resourcetimingbufferfull', function () {
                performance.clearResourceTimings();
            });
        }
    }
    if (!supportPerformanceNavigationTimingEvent()) {
        retrieveNavigationTimingWhenLoaded(function (timing) {
            handlePerformanceEntries(session, lifeCycle, [timing]);
        });
    }
}
exports.startPerformanceCollection = startPerformanceCollection;
function retrieveInitialDocumentResourceTiming(callback) {
    var timing;
    if (supportPerformanceNavigationTimingEvent() && performance.getEntriesByType('navigation').length > 0) {
        var navigationEntry = performance.getEntriesByType('navigation')[0];
        timing = tslib_1.__assign({}, navigationEntry.toJSON());
    }
    else {
        timing = tslib_1.__assign(tslib_1.__assign({}, computeRelativePerformanceTiming()), { name: window.location.href, decodedBodySize: 0, startTime: 0 });
    }
    timing.entryType = 'resource';
    timing.initiatorType = resourceUtils_1.FAKE_INITIAL_DOCUMENT;
    timing.duration = timing.responseEnd;
    callback(timing);
}
function retrieveNavigationTimingWhenLoaded(callback) {
    function sendFakeTiming() {
        var timing = tslib_1.__assign(tslib_1.__assign({}, computeRelativePerformanceTiming()), { entryType: 'navigation' });
        callback(timing);
    }
    if (document.readyState === 'complete') {
        sendFakeTiming();
    }
    else {
        var listener_1 = browser_core_1.monitor(function () {
            window.removeEventListener(browser_core_1.DOM_EVENT.LOAD, listener_1);
            // Send it a bit after the actual load event, so the "loadEventEnd" timing is accurate
            setTimeout(browser_core_1.monitor(sendFakeTiming));
        });
        window.addEventListener(browser_core_1.DOM_EVENT.LOAD, listener_1);
    }
}
function computeRelativePerformanceTiming() {
    var result = {};
    var timing = performance.timing;
    for (var key in timing) {
        if (browser_core_1.isNumber(timing[key])) {
            result[key] = timing[key] === 0 ? 0 : browser_core_1.getRelativeTime(timing[key]);
        }
    }
    return result;
}
function handlePerformanceEntries(session, lifeCycle, entries) {
    function notify(entry) {
        lifeCycle.notify(lifeCycle_1.LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, entry);
    }
    if (session.isTrackedWithResource()) {
        entries.filter(function (entry) { return entry.entryType === 'resource'; }).forEach(notify);
    }
    entries
        .filter(function (entry) { return entry.entryType === 'navigation'; })
        // Exclude incomplete navigation entries by filtering out those who have a loadEventEnd at 0
        .filter(function (entry) { return entry.loadEventEnd > 0; })
        .forEach(notify);
    entries.filter(function (entry) { return entry.entryType === 'paint'; }).forEach(notify);
    entries.filter(function (entry) { return entry.entryType === 'longtask'; }).forEach(notify);
}
//# sourceMappingURL=performanceCollection.js.map