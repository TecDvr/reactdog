import { Context } from '@datadog/browser-core';
import { LifeCycle } from './lifeCycle';
export declare enum UserActionType {
    CLICK = "click",
    CUSTOM = "custom"
}
export interface UserActionMeasures {
    errorCount: number;
    longTaskCount: number;
    resourceCount: number;
}
interface CustomUserAction {
    type: UserActionType.CUSTOM;
    name: string;
    context?: Context;
}
export interface AutoUserAction {
    type: UserActionType.CLICK;
    id: string;
    name: string;
    startTime: number;
    duration: number;
    measures: UserActionMeasures;
}
export declare type UserAction = CustomUserAction | AutoUserAction;
export declare function startUserActionCollection(lifeCycle: LifeCycle): {
    stop(): void;
};
declare function newUserAction(lifeCycle: LifeCycle, type: UserActionType, name: string): void;
export interface UserActionReference {
    id: string;
}
export declare function getUserActionReference(time?: number): UserActionReference | undefined;
export declare const $$tests: {
    newUserAction: typeof newUserAction;
    resetUserAction(): void;
};
export {};
