"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_core_1 = require("@datadog/browser-core");
var buildEnv_1 = require("./buildEnv");
var domMutationCollection_1 = require("./domMutationCollection");
var lifeCycle_1 = require("./lifeCycle");
var performanceCollection_1 = require("./performanceCollection");
var rum_1 = require("./rum");
var rumSession_1 = require("./rumSession");
var userActionCollection_1 = require("./userActionCollection");
var viewCollection_1 = require("./viewCollection");
var STUBBED_RUM = {
    init: function (userConfiguration) {
        browser_core_1.makeStub('core.init');
    },
    addRumGlobalContext: function (key, value) {
        browser_core_1.makeStub('addRumGlobalContext');
    },
    setRumGlobalContext: function (context) {
        browser_core_1.makeStub('setRumGlobalContext');
    },
    addUserAction: function (name, context) {
        browser_core_1.makeStub('addUserAction');
    },
    getInternalContext: function () {
        browser_core_1.makeStub('getInternalContext');
        return undefined;
    },
};
exports.datadogRum = browser_core_1.makeGlobal(STUBBED_RUM);
var isAlreadyInitialized = false;
exports.datadogRum.init = browser_core_1.monitor(function (userConfiguration) {
    if (!browser_core_1.checkCookiesAuthorized() || !browser_core_1.checkIsNotLocalFile() || !canInitRum(userConfiguration)) {
        return;
    }
    if (userConfiguration.publicApiKey) {
        userConfiguration.clientToken = userConfiguration.publicApiKey;
    }
    var rumUserConfiguration = tslib_1.__assign(tslib_1.__assign({}, userConfiguration), { isCollectingError: true });
    var lifeCycle = new lifeCycle_1.LifeCycle();
    var _a = browser_core_1.commonInit(rumUserConfiguration, buildEnv_1.buildEnv), errorObservable = _a.errorObservable, configuration = _a.configuration, internalMonitoring = _a.internalMonitoring;
    var session = rumSession_1.startRumSession(configuration, lifeCycle);
    var globalApi = rum_1.startRum(rumUserConfiguration.applicationId, lifeCycle, configuration, session, internalMonitoring);
    viewCollection_1.startViewCollection(location, lifeCycle, session);
    var _b = browser_core_1.startRequestCollection(), requestStartObservable = _b[0], requestCompleteObservable = _b[1];
    performanceCollection_1.startPerformanceCollection(lifeCycle, session);
    domMutationCollection_1.startDOMMutationCollection(lifeCycle);
    if (configuration.isEnabled('collect-user-actions')) {
        userActionCollection_1.startUserActionCollection(lifeCycle);
    }
    errorObservable.subscribe(function (errorMessage) { return lifeCycle.notify(lifeCycle_1.LifeCycleEventType.ERROR_COLLECTED, errorMessage); });
    requestStartObservable.subscribe(function (startEvent) { return lifeCycle.notify(lifeCycle_1.LifeCycleEventType.REQUEST_STARTED, startEvent); });
    requestCompleteObservable.subscribe(function (request) { return lifeCycle.notify(lifeCycle_1.LifeCycleEventType.REQUEST_COMPLETED, request); });
    browser_core_1.assign(exports.datadogRum, globalApi);
    isAlreadyInitialized = true;
});
function canInitRum(userConfiguration) {
    if (isAlreadyInitialized) {
        if (!userConfiguration.silentMultipleInit) {
            console.error('DD_RUM is already initialized.');
        }
        return false;
    }
    if (!userConfiguration || (!userConfiguration.clientToken && !userConfiguration.publicApiKey)) {
        console.error('Client Token is not configured, we will not send any data.');
        return false;
    }
    if (!userConfiguration.applicationId) {
        console.error('Application ID is not configured, no RUM data will be collected.');
        return false;
    }
    if (userConfiguration.sampleRate !== undefined && !browser_core_1.isPercentage(userConfiguration.sampleRate)) {
        console.error('Sample Rate should be a number between 0 and 100');
        return false;
    }
    if (userConfiguration.resourceSampleRate !== undefined && !browser_core_1.isPercentage(userConfiguration.resourceSampleRate)) {
        console.error('Resource Sample Rate should be a number between 0 and 100');
        return false;
    }
    return true;
}
browser_core_1.getGlobalObject().DD_RUM = exports.datadogRum;
//# sourceMappingURL=rum.entry.js.map