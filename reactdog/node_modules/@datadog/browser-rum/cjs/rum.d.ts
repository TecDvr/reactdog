import { Configuration, ErrorContext, HttpContext, InternalMonitoring, Omit, ResourceKind } from '@datadog/browser-core';
import { LifeCycle } from './lifeCycle';
import { RumGlobal } from './rum.entry';
import { RumSession } from './rumSession';
import { UserActionMeasures, UserActionReference, UserActionType } from './userActionCollection';
import { ViewLoadingType, ViewMeasures } from './viewCollection';
export interface PerformancePaintTiming extends PerformanceEntry {
    entryType: 'paint';
    name: 'first-paint' | 'first-contentful-paint';
    startTime: number;
    duration: 0;
}
export declare type PerformanceLongTaskTiming = PerformanceEntry;
export declare enum RumEventCategory {
    USER_ACTION = "user_action",
    ERROR = "error",
    LONG_TASK = "long_task",
    VIEW = "view",
    RESOURCE = "resource"
}
interface PerformanceResourceDetailsElement {
    duration: number;
    start: number;
}
export interface PerformanceResourceDetails {
    redirect?: PerformanceResourceDetailsElement;
    dns?: PerformanceResourceDetailsElement;
    connect?: PerformanceResourceDetailsElement;
    ssl?: PerformanceResourceDetailsElement;
    firstByte: PerformanceResourceDetailsElement;
    download: PerformanceResourceDetailsElement;
}
export interface RumResourceEvent {
    date: number;
    duration: number;
    evt: {
        category: RumEventCategory.RESOURCE;
    };
    http: {
        performance?: PerformanceResourceDetails;
        method?: string;
        statusCode?: number;
        url: string;
    };
    network: {
        bytesWritten?: number;
    };
    resource: {
        kind: ResourceKind;
    };
    traceId?: number;
    userAction?: UserActionReference;
}
export interface RumErrorEvent {
    date: number;
    http?: HttpContext;
    error: ErrorContext;
    evt: {
        category: RumEventCategory.ERROR;
    };
    message: string;
    userAction?: UserActionReference;
}
export interface RumViewEvent {
    date: number;
    duration: number;
    evt: {
        category: RumEventCategory.VIEW;
    };
    rum: {
        documentVersion: number;
    };
    view: {
        loadingTime?: number;
        loadingType: ViewLoadingType;
        measures: ViewMeasures;
    };
}
export interface RumLongTaskEvent {
    date: number;
    duration: number;
    evt: {
        category: RumEventCategory.LONG_TASK;
    };
    userAction?: UserActionReference;
}
export interface RumUserActionEvent {
    date?: number;
    duration?: number;
    evt: {
        category: RumEventCategory.USER_ACTION;
        name: string;
    };
    userAction: {
        id?: string;
        type: UserActionType;
        measures?: UserActionMeasures;
    };
}
export declare type RumEvent = RumErrorEvent | RumResourceEvent | RumViewEvent | RumLongTaskEvent | RumUserActionEvent;
export declare function startRum(applicationId: string, lifeCycle: LifeCycle, configuration: Configuration, session: RumSession, internalMonitoring: InternalMonitoring): Omit<RumGlobal, 'init'>;
export declare function trackRequests(configuration: Configuration, lifeCycle: LifeCycle, session: RumSession, addRumEvent: (event: RumEvent) => void): void;
export declare function handleResourceEntry(configuration: Configuration, entry: PerformanceResourceTiming, addRumEvent: (event: RumResourceEvent) => void, lifeCycle: LifeCycle): void;
export declare function handleLongTaskEntry(entry: PerformanceLongTaskTiming, addRumEvent: (event: RumLongTaskEvent) => void): void;
export {};
