"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_core_1 = require("@datadog/browser-core");
var lifeCycle_1 = require("./lifeCycle");
var matchRequestTiming_1 = require("./matchRequestTiming");
var resourceUtils_1 = require("./resourceUtils");
var userActionCollection_1 = require("./userActionCollection");
var viewCollection_1 = require("./viewCollection");
var RumEventCategory;
(function (RumEventCategory) {
    RumEventCategory["USER_ACTION"] = "user_action";
    RumEventCategory["ERROR"] = "error";
    RumEventCategory["LONG_TASK"] = "long_task";
    RumEventCategory["VIEW"] = "view";
    RumEventCategory["RESOURCE"] = "resource";
})(RumEventCategory = exports.RumEventCategory || (exports.RumEventCategory = {}));
var SessionType;
(function (SessionType) {
    SessionType["SYNTHETICS"] = "synthetics";
    SessionType["USER"] = "user";
})(SessionType || (SessionType = {}));
function startRum(applicationId, lifeCycle, configuration, session, internalMonitoring) {
    var globalContext = {};
    internalMonitoring.setExternalContextProvider(function () {
        return browser_core_1.deepMerge({
            application_id: applicationId,
            session_id: viewCollection_1.viewContext.sessionId,
            view: {
                id: viewCollection_1.viewContext.id,
            },
        }, globalContext);
    });
    var batch = startRumBatch(configuration, session, function () { return ({
        applicationId: applicationId,
        date: new Date().getTime(),
        session: {
            // must be computed on each event because synthetics instrumentation can be done after sdk execution
            // cf https://github.com/puppeteer/puppeteer/issues/3667
            type: getSessionType(),
        },
        sessionId: viewCollection_1.viewContext.sessionId,
        view: {
            id: viewCollection_1.viewContext.id,
            referrer: document.referrer,
            url: viewCollection_1.viewContext.location.href,
        },
    }); }, function () { return globalContext; }, function () { return lifeCycle.notify(lifeCycle_1.LifeCycleEventType.BEFORE_UNLOAD); });
    trackView(lifeCycle, batch.upsertRumEvent);
    trackErrors(lifeCycle, batch.addRumEvent);
    trackRequests(configuration, lifeCycle, session, batch.addRumEvent);
    trackPerformanceTiming(configuration, lifeCycle, batch.addRumEvent);
    trackCustomUserAction(lifeCycle, batch.addRumEvent);
    trackAutoUserAction(lifeCycle, batch.addRumEvent);
    return {
        addRumGlobalContext: browser_core_1.monitor(function (key, value) {
            globalContext[key] = value;
        }),
        addUserAction: browser_core_1.monitor(function (name, context) {
            lifeCycle.notify(lifeCycle_1.LifeCycleEventType.USER_ACTION_COLLECTED, { context: context, name: name, type: userActionCollection_1.UserActionType.CUSTOM });
        }),
        getInternalContext: browser_core_1.monitor(function () {
            return {
                application_id: applicationId,
                session_id: viewCollection_1.viewContext.sessionId,
                user_action: userActionCollection_1.getUserActionReference(),
                view: {
                    id: viewCollection_1.viewContext.id,
                },
            };
        }),
        setRumGlobalContext: browser_core_1.monitor(function (context) {
            globalContext = context;
        }),
    };
}
exports.startRum = startRum;
function startRumBatch(configuration, session, rumContextProvider, globalContextProvider, beforeUnloadCallback) {
    var batch = new browser_core_1.Batch(new browser_core_1.HttpRequest(configuration.rumEndpoint, configuration.batchBytesLimit, true), configuration.maxBatchSize, configuration.batchBytesLimit, configuration.maxMessageSize, configuration.flushTimeout, function () { return browser_core_1.deepMerge(browser_core_1.withSnakeCaseKeys(rumContextProvider()), globalContextProvider()); }, beforeUnloadCallback);
    return {
        addRumEvent: function (event, context) {
            if (session.isTracked()) {
                batch.add(tslib_1.__assign(tslib_1.__assign({}, context), browser_core_1.withSnakeCaseKeys(event)));
            }
        },
        upsertRumEvent: function (event, key) {
            if (session.isTracked()) {
                batch.upsert(browser_core_1.withSnakeCaseKeys(event), key);
            }
        },
    };
}
function trackView(lifeCycle, upsertRumEvent) {
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.VIEW_COLLECTED, function (view) {
        upsertRumEvent({
            date: browser_core_1.getTimestamp(view.startTime),
            duration: browser_core_1.msToNs(view.duration),
            evt: {
                category: RumEventCategory.VIEW,
            },
            rum: {
                documentVersion: view.documentVersion,
            },
            view: {
                loadingTime: view.loadingTime ? browser_core_1.msToNs(view.loadingTime) : undefined,
                loadingType: view.loadingType,
                measures: view.measures,
            },
        }, view.id);
    });
}
function trackErrors(lifeCycle, addRumEvent) {
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.ERROR_COLLECTED, function (_a) {
        var message = _a.message, startTime = _a.startTime, context = _a.context;
        addRumEvent(tslib_1.__assign({ message: message, date: browser_core_1.getTimestamp(startTime), evt: {
                category: RumEventCategory.ERROR,
            }, userAction: userActionCollection_1.getUserActionReference(startTime) }, context));
    });
}
function trackCustomUserAction(lifeCycle, addRumEvent) {
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.USER_ACTION_COLLECTED, function (userAction) {
        if (userAction.type === userActionCollection_1.UserActionType.CUSTOM) {
            addRumEvent({
                evt: {
                    category: RumEventCategory.USER_ACTION,
                    name: userAction.name,
                },
                userAction: {
                    type: userAction.type,
                },
            }, userAction.context);
        }
    });
}
function trackAutoUserAction(lifeCycle, addRumEvent) {
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.USER_ACTION_COLLECTED, function (userAction) {
        if (userAction.type !== userActionCollection_1.UserActionType.CUSTOM) {
            addRumEvent({
                date: browser_core_1.getTimestamp(userAction.startTime),
                duration: browser_core_1.msToNs(userAction.duration),
                evt: {
                    category: RumEventCategory.USER_ACTION,
                    name: userAction.name,
                },
                userAction: {
                    id: userAction.id,
                    measures: userAction.measures,
                    type: userAction.type,
                },
            });
        }
    });
}
function trackRequests(configuration, lifeCycle, session, addRumEvent) {
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.REQUEST_COMPLETED, function (request) {
        if (!session.isTrackedWithResource()) {
            return;
        }
        if (!resourceUtils_1.isValidResource(request.url, configuration)) {
            return;
        }
        var timing = matchRequestTiming_1.matchRequestTiming(request);
        var kind = request.type === browser_core_1.RequestType.XHR ? browser_core_1.ResourceKind.XHR : browser_core_1.ResourceKind.FETCH;
        var startTime = timing ? timing.startTime : request.startTime;
        addRumEvent({
            date: browser_core_1.getTimestamp(startTime),
            duration: timing ? resourceUtils_1.computePerformanceResourceDuration(timing) : browser_core_1.msToNs(request.duration),
            evt: {
                category: RumEventCategory.RESOURCE,
            },
            http: {
                method: request.method,
                performance: timing ? resourceUtils_1.computePerformanceResourceDetails(timing) : undefined,
                statusCode: request.status,
                url: request.url,
            },
            network: {
                bytesWritten: timing ? resourceUtils_1.computeSize(timing) : undefined,
            },
            resource: {
                kind: kind,
            },
            traceId: request.traceId,
            userAction: userActionCollection_1.getUserActionReference(startTime),
        });
        lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RESOURCE_ADDED_TO_BATCH);
    });
}
exports.trackRequests = trackRequests;
function trackPerformanceTiming(configuration, lifeCycle, addRumEvent) {
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {
        switch (entry.entryType) {
            case 'resource':
                handleResourceEntry(configuration, entry, addRumEvent, lifeCycle);
                break;
            case 'longtask':
                handleLongTaskEntry(entry, addRumEvent);
                break;
            default:
                break;
        }
    });
}
function handleResourceEntry(configuration, entry, addRumEvent, lifeCycle) {
    if (!resourceUtils_1.isValidResource(entry.name, configuration)) {
        return;
    }
    var resourceKind = resourceUtils_1.computeResourceKind(entry);
    if (browser_core_1.includes([browser_core_1.ResourceKind.XHR, browser_core_1.ResourceKind.FETCH], resourceKind)) {
        return;
    }
    addRumEvent({
        date: browser_core_1.getTimestamp(entry.startTime),
        duration: resourceUtils_1.computePerformanceResourceDuration(entry),
        evt: {
            category: RumEventCategory.RESOURCE,
        },
        http: {
            performance: resourceUtils_1.computePerformanceResourceDetails(entry),
            url: entry.name,
        },
        network: {
            bytesWritten: resourceUtils_1.computeSize(entry),
        },
        resource: {
            kind: resourceKind,
        },
        userAction: userActionCollection_1.getUserActionReference(entry.startTime),
    });
    lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RESOURCE_ADDED_TO_BATCH);
}
exports.handleResourceEntry = handleResourceEntry;
function handleLongTaskEntry(entry, addRumEvent) {
    addRumEvent({
        date: browser_core_1.getTimestamp(entry.startTime),
        duration: browser_core_1.msToNs(entry.duration),
        evt: {
            category: RumEventCategory.LONG_TASK,
        },
        userAction: userActionCollection_1.getUserActionReference(entry.startTime),
    });
}
exports.handleLongTaskEntry = handleLongTaskEntry;
function getSessionType() {
    return window._DATADOG_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;
}
//# sourceMappingURL=rum.js.map