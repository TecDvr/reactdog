"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var browser_core_1 = require("@datadog/browser-core");
var getElementContent_1 = require("./getElementContent");
var lifeCycle_1 = require("./lifeCycle");
var trackEventCounts_1 = require("./trackEventCounts");
var trackPageActivities_1 = require("./trackPageActivities");
var UserActionType;
(function (UserActionType) {
    UserActionType["CLICK"] = "click";
    UserActionType["CUSTOM"] = "custom";
})(UserActionType = exports.UserActionType || (exports.UserActionType = {}));
var pendingAutoUserAction;
function startUserActionCollection(lifeCycle) {
    addEventListener(browser_core_1.DOM_EVENT.CLICK, processClick, { capture: true });
    function processClick(event) {
        if (!(event.target instanceof Element)) {
            return;
        }
        newUserAction(lifeCycle, UserActionType.CLICK, getElementContent_1.getElementContent(event.target));
    }
    // New views trigger the cancellation of the current pending User Action
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.VIEW_COLLECTED, function () {
        if (pendingAutoUserAction) {
            pendingAutoUserAction.stop();
        }
    });
    return {
        stop: function () {
            if (pendingAutoUserAction) {
                pendingAutoUserAction.stop();
            }
            removeEventListener(browser_core_1.DOM_EVENT.CLICK, processClick, { capture: true });
        },
    };
}
exports.startUserActionCollection = startUserActionCollection;
function newUserAction(lifeCycle, type, name) {
    if (pendingAutoUserAction) {
        // Discard any new user action if another one is already occurring.
        return;
    }
    var id = browser_core_1.generateUUID();
    var startTime = performance.now();
    var _a = trackEventCounts_1.trackEventCounts(lifeCycle), eventCounts = _a.eventCounts, stopEventCountsTracking = _a.stop;
    var stopWaitIdlePageActivity = trackPageActivities_1.waitIdlePageActivity(lifeCycle, function (hadActivity, endTime) {
        if (hadActivity) {
            lifeCycle.notify(lifeCycle_1.LifeCycleEventType.USER_ACTION_COLLECTED, {
                id: id,
                name: name,
                startTime: startTime,
                type: type,
                duration: endTime - startTime,
                measures: {
                    errorCount: eventCounts.errorCount,
                    longTaskCount: eventCounts.longTaskCount,
                    resourceCount: eventCounts.resourceCount,
                },
            });
        }
        stopEventCountsTracking();
        pendingAutoUserAction = undefined;
    }).stop;
    pendingAutoUserAction = {
        id: id,
        startTime: startTime,
        stop: function () {
            stopEventCountsTracking();
            stopWaitIdlePageActivity();
            pendingAutoUserAction = undefined;
        },
    };
}
function getUserActionReference(time) {
    if (!pendingAutoUserAction || (time !== undefined && time < pendingAutoUserAction.startTime)) {
        return undefined;
    }
    return { id: pendingAutoUserAction.id };
}
exports.getUserActionReference = getUserActionReference;
exports.$$tests = {
    newUserAction: newUserAction,
    resetUserAction: function () {
        pendingAutoUserAction = undefined;
    },
};
//# sourceMappingURL=userActionCollection.js.map