import { ErrorMessage, RequestCompleteEvent, RequestStartEvent } from '@datadog/browser-core';
import { UserAction } from './userActionCollection';
import { View } from './viewCollection';
export declare enum LifeCycleEventType {
    ERROR_COLLECTED = 0,
    PERFORMANCE_ENTRY_COLLECTED = 1,
    USER_ACTION_COLLECTED = 2,
    VIEW_COLLECTED = 3,
    REQUEST_STARTED = 4,
    REQUEST_COMPLETED = 5,
    SESSION_RENEWED = 6,
    RESOURCE_ADDED_TO_BATCH = 7,
    DOM_MUTATED = 8,
    BEFORE_UNLOAD = 9
}
export interface Subscription {
    unsubscribe(): void;
}
export declare class LifeCycle {
    private callbacks;
    notify(eventType: LifeCycleEventType.ERROR_COLLECTED, data: ErrorMessage): void;
    notify(eventType: LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, data: PerformanceEntry): void;
    notify(eventType: LifeCycleEventType.REQUEST_STARTED, data: RequestStartEvent): void;
    notify(eventType: LifeCycleEventType.REQUEST_COMPLETED, data: RequestCompleteEvent): void;
    notify(eventType: LifeCycleEventType.USER_ACTION_COLLECTED, data: UserAction): void;
    notify(eventType: LifeCycleEventType.VIEW_COLLECTED, data: View): void;
    notify(eventType: LifeCycleEventType.SESSION_RENEWED | LifeCycleEventType.RESOURCE_ADDED_TO_BATCH | LifeCycleEventType.DOM_MUTATED | LifeCycleEventType.BEFORE_UNLOAD): void;
    subscribe(eventType: LifeCycleEventType.ERROR_COLLECTED, callback: (data: ErrorMessage) => void): Subscription;
    subscribe(eventType: LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, callback: (data: PerformanceEntry) => void): Subscription;
    subscribe(eventType: LifeCycleEventType.REQUEST_STARTED, callback: (data: RequestStartEvent) => void): Subscription;
    subscribe(eventType: LifeCycleEventType.REQUEST_COMPLETED, callback: (data: RequestCompleteEvent) => void): Subscription;
    subscribe(eventType: LifeCycleEventType.USER_ACTION_COLLECTED, callback: (data: UserAction) => void): Subscription;
    subscribe(eventType: LifeCycleEventType.VIEW_COLLECTED, callback: (data: View) => void): Subscription;
    subscribe(eventType: LifeCycleEventType.SESSION_RENEWED | LifeCycleEventType.RESOURCE_ADDED_TO_BATCH | LifeCycleEventType.DOM_MUTATED | LifeCycleEventType.BEFORE_UNLOAD, callback: () => void): Subscription;
}
