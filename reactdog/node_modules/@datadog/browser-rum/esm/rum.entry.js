import { __assign } from "tslib";
import { assign, checkCookiesAuthorized, checkIsNotLocalFile, commonInit, getGlobalObject, isPercentage, makeGlobal, makeStub, monitor, startRequestCollection, } from '@datadog/browser-core';
import { buildEnv } from './buildEnv';
import { startDOMMutationCollection } from './domMutationCollection';
import { LifeCycle, LifeCycleEventType } from './lifeCycle';
import { startPerformanceCollection } from './performanceCollection';
import { startRum } from './rum';
import { startRumSession } from './rumSession';
import { startUserActionCollection } from './userActionCollection';
import { startViewCollection } from './viewCollection';
var STUBBED_RUM = {
    init: function (userConfiguration) {
        makeStub('core.init');
    },
    addRumGlobalContext: function (key, value) {
        makeStub('addRumGlobalContext');
    },
    setRumGlobalContext: function (context) {
        makeStub('setRumGlobalContext');
    },
    addUserAction: function (name, context) {
        makeStub('addUserAction');
    },
    getInternalContext: function () {
        makeStub('getInternalContext');
        return undefined;
    },
};
export var datadogRum = makeGlobal(STUBBED_RUM);
var isAlreadyInitialized = false;
datadogRum.init = monitor(function (userConfiguration) {
    if (!checkCookiesAuthorized() || !checkIsNotLocalFile() || !canInitRum(userConfiguration)) {
        return;
    }
    if (userConfiguration.publicApiKey) {
        userConfiguration.clientToken = userConfiguration.publicApiKey;
    }
    var rumUserConfiguration = __assign(__assign({}, userConfiguration), { isCollectingError: true });
    var lifeCycle = new LifeCycle();
    var _a = commonInit(rumUserConfiguration, buildEnv), errorObservable = _a.errorObservable, configuration = _a.configuration, internalMonitoring = _a.internalMonitoring;
    var session = startRumSession(configuration, lifeCycle);
    var globalApi = startRum(rumUserConfiguration.applicationId, lifeCycle, configuration, session, internalMonitoring);
    startViewCollection(location, lifeCycle, session);
    var _b = startRequestCollection(), requestStartObservable = _b[0], requestCompleteObservable = _b[1];
    startPerformanceCollection(lifeCycle, session);
    startDOMMutationCollection(lifeCycle);
    if (configuration.isEnabled('collect-user-actions')) {
        startUserActionCollection(lifeCycle);
    }
    errorObservable.subscribe(function (errorMessage) { return lifeCycle.notify(LifeCycleEventType.ERROR_COLLECTED, errorMessage); });
    requestStartObservable.subscribe(function (startEvent) { return lifeCycle.notify(LifeCycleEventType.REQUEST_STARTED, startEvent); });
    requestCompleteObservable.subscribe(function (request) { return lifeCycle.notify(LifeCycleEventType.REQUEST_COMPLETED, request); });
    assign(datadogRum, globalApi);
    isAlreadyInitialized = true;
});
function canInitRum(userConfiguration) {
    if (isAlreadyInitialized) {
        if (!userConfiguration.silentMultipleInit) {
            console.error('DD_RUM is already initialized.');
        }
        return false;
    }
    if (!userConfiguration || (!userConfiguration.clientToken && !userConfiguration.publicApiKey)) {
        console.error('Client Token is not configured, we will not send any data.');
        return false;
    }
    if (!userConfiguration.applicationId) {
        console.error('Application ID is not configured, no RUM data will be collected.');
        return false;
    }
    if (userConfiguration.sampleRate !== undefined && !isPercentage(userConfiguration.sampleRate)) {
        console.error('Sample Rate should be a number between 0 and 100');
        return false;
    }
    if (userConfiguration.resourceSampleRate !== undefined && !isPercentage(userConfiguration.resourceSampleRate)) {
        console.error('Resource Sample Rate should be a number between 0 and 100');
        return false;
    }
    return true;
}
getGlobalObject().DD_RUM = datadogRum;
//# sourceMappingURL=rum.entry.js.map