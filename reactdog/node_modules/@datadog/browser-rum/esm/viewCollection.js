import { __assign } from "tslib";
import { DOM_EVENT, generateUUID, monitor, msToNs, noop, throttle } from '@datadog/browser-core';
import { LifeCycleEventType } from './lifeCycle';
import { trackEventCounts } from './trackEventCounts';
import { waitIdlePageActivity } from './trackPageActivities';
export var ViewLoadingType;
(function (ViewLoadingType) {
    ViewLoadingType["INITIAL_LOAD"] = "initial_load";
    ViewLoadingType["ROUTE_CHANGE"] = "route_change";
})(ViewLoadingType || (ViewLoadingType = {}));
export var THROTTLE_VIEW_UPDATE_PERIOD = 3000;
export function startViewCollection(location, lifeCycle, session) {
    var currentLocation = __assign({}, location);
    var startOrigin = 0;
    var currentView = newView(lifeCycle, currentLocation, session, ViewLoadingType.INITIAL_LOAD, startOrigin);
    // Renew view on history changes
    trackHistory(function () {
        if (areDifferentViews(currentLocation, location)) {
            currentLocation = __assign({}, location);
            currentView.end();
            currentView = newView(lifeCycle, currentLocation, session, ViewLoadingType.ROUTE_CHANGE);
        }
    });
    // Renew view on session renewal
    lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, function () {
        currentView.end();
        currentView = newView(lifeCycle, currentLocation, session, ViewLoadingType.ROUTE_CHANGE);
    });
    // End the current view on page unload
    lifeCycle.subscribe(LifeCycleEventType.BEFORE_UNLOAD, function () {
        currentView.end();
    });
}
export var viewContext;
function newView(lifeCycle, location, session, loadingType, startOrigin) {
    if (startOrigin === void 0) { startOrigin = performance.now(); }
    // Setup initial values
    var id = generateUUID();
    var measures = {
        errorCount: 0,
        longTaskCount: 0,
        resourceCount: 0,
        userActionCount: 0,
    };
    var documentVersion = 0;
    var loadingTime;
    viewContext = { id: id, location: location, sessionId: session.getId() };
    // Update the view every time the measures are changing
    var _a = throttle(monitor(updateView), THROTTLE_VIEW_UPDATE_PERIOD, {
        leading: false,
    }), scheduleViewUpdate = _a.throttled, stopScheduleViewUpdate = _a.stop;
    function updateMeasures(newMeasures) {
        measures = __assign(__assign({}, measures), newMeasures);
        scheduleViewUpdate();
    }
    var stopTimingsTracking = trackTimings(lifeCycle, updateMeasures).stop;
    var stopEventCountsTracking = trackEventCounts(lifeCycle, updateMeasures).stop;
    function updateLoadingTime(loadingTimeValue) {
        loadingTime = loadingTimeValue;
        scheduleViewUpdate();
    }
    var stopLoadingTimeTracking = trackLoadingTime(lifeCycle, loadingType, updateLoadingTime).stop;
    // Initial view update
    updateView();
    function updateView() {
        documentVersion += 1;
        lifeCycle.notify(LifeCycleEventType.VIEW_COLLECTED, {
            documentVersion: documentVersion,
            id: id,
            loadingTime: loadingTime,
            loadingType: loadingType,
            location: location,
            measures: measures,
            duration: performance.now() - startOrigin,
            startTime: startOrigin,
        });
    }
    return {
        end: function () {
            stopTimingsTracking();
            stopEventCountsTracking();
            stopLoadingTimeTracking();
            // prevent pending view updates execution
            stopScheduleViewUpdate();
            // Make a final view update
            updateView();
        },
    };
}
function trackHistory(onHistoryChange) {
    var originalPushState = history.pushState;
    history.pushState = monitor(function () {
        originalPushState.apply(this, arguments);
        onHistoryChange();
    });
    var originalReplaceState = history.replaceState;
    history.replaceState = monitor(function () {
        originalReplaceState.apply(this, arguments);
        onHistoryChange();
    });
    window.addEventListener(DOM_EVENT.POP_STATE, monitor(onHistoryChange));
}
function areDifferentViews(previous, current) {
    return previous.pathname !== current.pathname;
}
function trackTimings(lifeCycle, callback) {
    var timings = {};
    var stopPerformanceTracking = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {
        if (entry.entryType === 'navigation') {
            var navigationEntry = entry;
            timings = __assign(__assign({}, timings), { domComplete: msToNs(navigationEntry.domComplete), domContentLoaded: msToNs(navigationEntry.domContentLoadedEventEnd), domInteractive: msToNs(navigationEntry.domInteractive), loadEventEnd: msToNs(navigationEntry.loadEventEnd) });
            callback(timings);
        }
        else if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint') {
            var paintEntry = entry;
            timings = __assign(__assign({}, timings), { firstContentfulPaint: msToNs(paintEntry.startTime) });
            callback(timings);
        }
    }).unsubscribe;
    return { stop: stopPerformanceTracking };
}
function trackLoadingTime(lifeCycle, loadingType, callback) {
    var expectedTiming = 1;
    var receivedTimings = [];
    var stopLoadEventLoadingTime = noop;
    if (loadingType === ViewLoadingType.INITIAL_LOAD) {
        expectedTiming += 1;
        (stopLoadEventLoadingTime = trackLoadEventLoadingTime(lifeCycle, onTimingValue).stop);
    }
    var stopActivityLoadingTimeTracking = trackActivityLoadingTime(lifeCycle, onTimingValue).stop;
    function onTimingValue(timingValue) {
        expectedTiming -= 1;
        if (timingValue) {
            receivedTimings.push(timingValue);
        }
        if (expectedTiming === 0 && receivedTimings.length) {
            callback(Math.max.apply(Math, receivedTimings));
        }
    }
    return {
        stop: function () {
            stopActivityLoadingTimeTracking();
            stopLoadEventLoadingTime();
        },
    };
}
function trackLoadEventLoadingTime(lifeCycle, callback) {
    var stopPerformanceTracking = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {
        if (entry.entryType === 'navigation') {
            var navigationEntry = entry;
            callback(navigationEntry.loadEventEnd);
        }
    }).unsubscribe;
    return { stop: stopPerformanceTracking };
}
function trackActivityLoadingTime(lifeCycle, callback) {
    var startTime = performance.now();
    var stopWaitIdlePageActivity = waitIdlePageActivity(lifeCycle, function (hadActivity, endTime) {
        if (hadActivity) {
            callback(endTime - startTime);
        }
        else {
            callback(undefined);
        }
    }).stop;
    return { stop: stopWaitIdlePageActivity };
}
//# sourceMappingURL=viewCollection.js.map