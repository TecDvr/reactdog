import { DOM_EVENT, generateUUID } from '@datadog/browser-core';
import { getElementContent } from './getElementContent';
import { LifeCycleEventType } from './lifeCycle';
import { trackEventCounts } from './trackEventCounts';
import { waitIdlePageActivity } from './trackPageActivities';
export var UserActionType;
(function (UserActionType) {
    UserActionType["CLICK"] = "click";
    UserActionType["CUSTOM"] = "custom";
})(UserActionType || (UserActionType = {}));
var pendingAutoUserAction;
export function startUserActionCollection(lifeCycle) {
    addEventListener(DOM_EVENT.CLICK, processClick, { capture: true });
    function processClick(event) {
        if (!(event.target instanceof Element)) {
            return;
        }
        newUserAction(lifeCycle, UserActionType.CLICK, getElementContent(event.target));
    }
    // New views trigger the cancellation of the current pending User Action
    lifeCycle.subscribe(LifeCycleEventType.VIEW_COLLECTED, function () {
        if (pendingAutoUserAction) {
            pendingAutoUserAction.stop();
        }
    });
    return {
        stop: function () {
            if (pendingAutoUserAction) {
                pendingAutoUserAction.stop();
            }
            removeEventListener(DOM_EVENT.CLICK, processClick, { capture: true });
        },
    };
}
function newUserAction(lifeCycle, type, name) {
    if (pendingAutoUserAction) {
        // Discard any new user action if another one is already occurring.
        return;
    }
    var id = generateUUID();
    var startTime = performance.now();
    var _a = trackEventCounts(lifeCycle), eventCounts = _a.eventCounts, stopEventCountsTracking = _a.stop;
    var stopWaitIdlePageActivity = waitIdlePageActivity(lifeCycle, function (hadActivity, endTime) {
        if (hadActivity) {
            lifeCycle.notify(LifeCycleEventType.USER_ACTION_COLLECTED, {
                id: id,
                name: name,
                startTime: startTime,
                type: type,
                duration: endTime - startTime,
                measures: {
                    errorCount: eventCounts.errorCount,
                    longTaskCount: eventCounts.longTaskCount,
                    resourceCount: eventCounts.resourceCount,
                },
            });
        }
        stopEventCountsTracking();
        pendingAutoUserAction = undefined;
    }).stop;
    pendingAutoUserAction = {
        id: id,
        startTime: startTime,
        stop: function () {
            stopEventCountsTracking();
            stopWaitIdlePageActivity();
            pendingAutoUserAction = undefined;
        },
    };
}
export function getUserActionReference(time) {
    if (!pendingAutoUserAction || (time !== undefined && time < pendingAutoUserAction.startTime)) {
        return undefined;
    }
    return { id: pendingAutoUserAction.id };
}
export var $$tests = {
    newUserAction: newUserAction,
    resetUserAction: function () {
        pendingAutoUserAction = undefined;
    },
};
//# sourceMappingURL=userActionCollection.js.map