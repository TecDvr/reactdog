import { __assign } from "tslib";
import { buildConfiguration } from './configuration';
import { areCookiesAuthorized } from './cookie';
import { startErrorCollection } from './errorCollection';
import { setDebugMode, startInternalMonitoring } from './internalMonitoring';
export function makeStub(methodName) {
    console.warn("'" + methodName + "' not yet available, please call '.init()' first.");
}
export function makeGlobal(stub) {
    var global = __assign({}, stub);
    // Add an "hidden" property to set debug mode. We define it that way to hide it
    // as much as possible but of course it's not a real protection.
    Object.defineProperty(global, '_setDebug', {
        get: function () {
            return setDebugMode;
        },
        enumerable: false,
    });
    return global;
}
export function commonInit(userConfiguration, buildEnv) {
    var configuration = buildConfiguration(userConfiguration, buildEnv);
    var internalMonitoring = startInternalMonitoring(configuration);
    var errorObservable = startErrorCollection(configuration);
    return {
        configuration: configuration,
        errorObservable: errorObservable,
        internalMonitoring: internalMonitoring,
    };
}
export function checkCookiesAuthorized() {
    if (!areCookiesAuthorized()) {
        console.warn('Cookies are not authorized, we will not send any data.');
        return false;
    }
    return true;
}
export function checkIsNotLocalFile() {
    if (isLocalFile()) {
        console.error('Execution is not allowed in the current context.');
        return false;
    }
    return true;
}
function isLocalFile() {
    return window.location.protocol === 'file:';
}
//# sourceMappingURL=init.js.map