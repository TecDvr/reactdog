import { __assign } from "tslib";
import { includes, ONE_KILO_BYTE, ONE_SECOND } from './utils';
export var DEFAULT_CONFIGURATION = {
    isCollectingError: true,
    maxErrorsByMinute: 3000,
    maxInternalMonitoringMessagesPerPage: 15,
    resourceSampleRate: 100,
    sampleRate: 100,
    silentMultipleInit: false,
    /**
     * arbitrary value, byte precision not needed
     */
    requestErrorResponseLengthLimit: 32 * ONE_KILO_BYTE,
    /**
     * flush automatically, aim to be lower than ALB connection timeout
     * to maximize connection reuse.
     */
    flushTimeout: 30 * ONE_SECOND,
    /**
     * Logs intake limit
     */
    maxBatchSize: 50,
    maxMessageSize: 256 * ONE_KILO_BYTE,
    /**
     * beacon payload max queue size implementation is 64kb
     * ensure that we leave room for logs, rum and potential other users
     */
    batchBytesLimit: 16 * ONE_KILO_BYTE,
};
export function buildConfiguration(userConfiguration, buildEnv) {
    var transportConfiguration = {
        applicationId: userConfiguration.applicationId,
        buildMode: buildEnv.buildMode,
        clientToken: userConfiguration.clientToken,
        datacenter: userConfiguration.datacenter || buildEnv.datacenter,
        env: userConfiguration.env,
        proxyHost: userConfiguration.proxyHost,
        sdkEnv: buildEnv.sdkEnv,
        sdkVersion: buildEnv.sdkVersion,
        service: userConfiguration.service,
        version: userConfiguration.version,
    };
    var enableExperimentalFeatures = Array.isArray(userConfiguration.enableExperimentalFeatures)
        ? userConfiguration.enableExperimentalFeatures
        : [];
    var configuration = __assign({ isEnabled: function (feature) {
            return includes(enableExperimentalFeatures, feature);
        }, logsEndpoint: getEndpoint('browser', transportConfiguration), rumEndpoint: getEndpoint('rum', transportConfiguration), traceEndpoint: getEndpoint('public-trace', transportConfiguration) }, DEFAULT_CONFIGURATION);
    if (userConfiguration.internalMonitoringApiKey) {
        configuration.internalMonitoringEndpoint = getEndpoint('browser', transportConfiguration, 'browser-agent-internal-monitoring');
    }
    if ('isCollectingError' in userConfiguration) {
        configuration.isCollectingError = !!userConfiguration.isCollectingError;
    }
    if ('sampleRate' in userConfiguration) {
        configuration.sampleRate = userConfiguration.sampleRate;
    }
    if ('resourceSampleRate' in userConfiguration) {
        configuration.resourceSampleRate = userConfiguration.resourceSampleRate;
    }
    if (transportConfiguration.buildMode === 'e2e-test') {
        if (userConfiguration.internalMonitoringEndpoint !== undefined) {
            configuration.internalMonitoringEndpoint = userConfiguration.internalMonitoringEndpoint;
        }
        if (userConfiguration.logsEndpoint !== undefined) {
            configuration.logsEndpoint = userConfiguration.logsEndpoint;
        }
        if (userConfiguration.rumEndpoint !== undefined) {
            configuration.rumEndpoint = userConfiguration.rumEndpoint;
        }
    }
    return configuration;
}
function getEndpoint(type, conf, source) {
    var tld = conf.datacenter === 'us' ? 'com' : 'eu';
    var domain = conf.sdkEnv === 'production' ? "datadoghq." + tld : "datad0g." + tld;
    var tags = "sdk_version:" + conf.sdkVersion +
        ("" + (conf.env ? ",env:" + conf.env : '')) +
        ("" + (conf.service ? ",service:" + conf.service : '')) +
        ("" + (conf.version ? ",version:" + conf.version : ''));
    var datadogHost = type + "-http-intake.logs." + domain;
    var host = conf.proxyHost ? conf.proxyHost : datadogHost;
    var proxyParameter = conf.proxyHost ? "ddhost=" + datadogHost + "&" : '';
    var applicationIdParameter = conf.applicationId ? "_dd.application_id=" + conf.applicationId + "&" : '';
    var parameters = "" + applicationIdParameter + proxyParameter + "ddsource=" + (source || 'browser') + "&ddtags=" + tags;
    return "https://" + host + "/v1/input/" + conf.clientToken + "?" + parameters;
}
//# sourceMappingURL=configuration.js.map