import { Configuration } from './configuration';
import { RequestCompleteEvent, RequestObservables } from './requestCollection';
export declare const SPEC_ENDPOINTS: Partial<Configuration>;
export declare function isSafari(): boolean;
export declare function isFirefox(): boolean;
export declare function isIE(): boolean;
export declare function clearAllCookies(): void;
export declare class FetchStubBuilder {
    private requests;
    private whenAllCompleteFn;
    constructor([requestStartObservable, requestCompleteObservable]: RequestObservables);
    whenAllComplete(onCompleteFn: (_: RequestCompleteEvent[]) => void): void;
    getStub(): FetchStub;
}
export interface ResponseStub extends Partial<Response> {
    responseText?: string;
    responseTextError?: Error;
}
export declare type FetchStub = (input: RequestInfo, init?: RequestInit) => FetchStubPromise;
export interface FetchStubPromise extends Promise<Response> {
    resolveWith: (response: ResponseStub) => Promise<ResponseStub>;
    rejectWith: (error: Error) => Promise<Error>;
}
export declare class PerformanceObserverStubBuilder {
    instance: any;
    getEntryTypes(): any;
    fakeEntry(entry: PerformanceEntry, entryType: string): void;
    getStub(): PerformanceObserver;
}
export declare function setPageVisibility(visibility: 'visible' | 'hidden'): void;
export declare function restorePageVisibility(): void;
