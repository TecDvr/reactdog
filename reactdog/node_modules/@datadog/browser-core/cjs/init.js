"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var configuration_1 = require("./configuration");
var cookie_1 = require("./cookie");
var errorCollection_1 = require("./errorCollection");
var internalMonitoring_1 = require("./internalMonitoring");
function makeStub(methodName) {
    console.warn("'" + methodName + "' not yet available, please call '.init()' first.");
}
exports.makeStub = makeStub;
function makeGlobal(stub) {
    var global = tslib_1.__assign({}, stub);
    // Add an "hidden" property to set debug mode. We define it that way to hide it
    // as much as possible but of course it's not a real protection.
    Object.defineProperty(global, '_setDebug', {
        get: function () {
            return internalMonitoring_1.setDebugMode;
        },
        enumerable: false,
    });
    return global;
}
exports.makeGlobal = makeGlobal;
function commonInit(userConfiguration, buildEnv) {
    var configuration = configuration_1.buildConfiguration(userConfiguration, buildEnv);
    var internalMonitoring = internalMonitoring_1.startInternalMonitoring(configuration);
    var errorObservable = errorCollection_1.startErrorCollection(configuration);
    return {
        configuration: configuration,
        errorObservable: errorObservable,
        internalMonitoring: internalMonitoring,
    };
}
exports.commonInit = commonInit;
function checkCookiesAuthorized() {
    if (!cookie_1.areCookiesAuthorized()) {
        console.warn('Cookies are not authorized, we will not send any data.');
        return false;
    }
    return true;
}
exports.checkCookiesAuthorized = checkCookiesAuthorized;
function checkIsNotLocalFile() {
    if (isLocalFile()) {
        console.error('Execution is not allowed in the current context.');
        return false;
    }
    return true;
}
exports.checkIsNotLocalFile = checkIsNotLocalFile;
function isLocalFile() {
    return window.location.protocol === 'file:';
}
//# sourceMappingURL=init.js.map