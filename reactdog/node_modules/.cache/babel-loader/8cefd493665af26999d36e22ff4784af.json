{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { includes, ONE_KILO_BYTE, ONE_SECOND } from './utils';\nexport var DEFAULT_CONFIGURATION = {\n  isCollectingError: true,\n  maxErrorsByMinute: 3000,\n  maxInternalMonitoringMessagesPerPage: 15,\n  resourceSampleRate: 100,\n  sampleRate: 100,\n  silentMultipleInit: false,\n\n  /**\n   * arbitrary value, byte precision not needed\n   */\n  requestErrorResponseLengthLimit: 32 * ONE_KILO_BYTE,\n\n  /**\n   * flush automatically, aim to be lower than ALB connection timeout\n   * to maximize connection reuse.\n   */\n  flushTimeout: 30 * ONE_SECOND,\n\n  /**\n   * Logs intake limit\n   */\n  maxBatchSize: 50,\n  maxMessageSize: 256 * ONE_KILO_BYTE,\n\n  /**\n   * beacon payload max queue size implementation is 64kb\n   * ensure that we leave room for logs, rum and potential other users\n   */\n  batchBytesLimit: 16 * ONE_KILO_BYTE\n};\nexport function buildConfiguration(userConfiguration, buildEnv) {\n  var transportConfiguration = {\n    applicationId: userConfiguration.applicationId,\n    buildMode: buildEnv.buildMode,\n    clientToken: userConfiguration.clientToken,\n    datacenter: userConfiguration.datacenter || buildEnv.datacenter,\n    env: userConfiguration.env,\n    proxyHost: userConfiguration.proxyHost,\n    sdkEnv: buildEnv.sdkEnv,\n    sdkVersion: buildEnv.sdkVersion,\n    service: userConfiguration.service,\n    version: userConfiguration.version\n  };\n  var enableExperimentalFeatures = Array.isArray(userConfiguration.enableExperimentalFeatures) ? userConfiguration.enableExperimentalFeatures : [];\n\n  var configuration = __assign({\n    isEnabled: function (feature) {\n      return includes(enableExperimentalFeatures, feature);\n    },\n    logsEndpoint: getEndpoint('browser', transportConfiguration),\n    rumEndpoint: getEndpoint('rum', transportConfiguration),\n    traceEndpoint: getEndpoint('public-trace', transportConfiguration)\n  }, DEFAULT_CONFIGURATION);\n\n  if (userConfiguration.internalMonitoringApiKey) {\n    configuration.internalMonitoringEndpoint = getEndpoint('browser', transportConfiguration, 'browser-agent-internal-monitoring');\n  }\n\n  if ('isCollectingError' in userConfiguration) {\n    configuration.isCollectingError = !!userConfiguration.isCollectingError;\n  }\n\n  if ('sampleRate' in userConfiguration) {\n    configuration.sampleRate = userConfiguration.sampleRate;\n  }\n\n  if ('resourceSampleRate' in userConfiguration) {\n    configuration.resourceSampleRate = userConfiguration.resourceSampleRate;\n  }\n\n  if (transportConfiguration.buildMode === 'e2e-test') {\n    if (userConfiguration.internalMonitoringEndpoint !== undefined) {\n      configuration.internalMonitoringEndpoint = userConfiguration.internalMonitoringEndpoint;\n    }\n\n    if (userConfiguration.logsEndpoint !== undefined) {\n      configuration.logsEndpoint = userConfiguration.logsEndpoint;\n    }\n\n    if (userConfiguration.rumEndpoint !== undefined) {\n      configuration.rumEndpoint = userConfiguration.rumEndpoint;\n    }\n  }\n\n  return configuration;\n}\n\nfunction getEndpoint(type, conf, source) {\n  var tld = conf.datacenter === 'us' ? 'com' : 'eu';\n  var domain = conf.sdkEnv === 'production' ? \"datadoghq.\" + tld : \"datad0g.\" + tld;\n  var tags = \"sdk_version:\" + conf.sdkVersion + (\"\" + (conf.env ? \",env:\" + conf.env : '')) + (\"\" + (conf.service ? \",service:\" + conf.service : '')) + (\"\" + (conf.version ? \",version:\" + conf.version : ''));\n  var datadogHost = type + \"-http-intake.logs.\" + domain;\n  var host = conf.proxyHost ? conf.proxyHost : datadogHost;\n  var proxyParameter = conf.proxyHost ? \"ddhost=\" + datadogHost + \"&\" : '';\n  var applicationIdParameter = conf.applicationId ? \"_dd.application_id=\" + conf.applicationId + \"&\" : '';\n  var parameters = \"\" + applicationIdParameter + proxyParameter + \"ddsource=\" + (source || 'browser') + \"&ddtags=\" + tags;\n  return \"https://\" + host + \"/v1/input/\" + conf.clientToken + \"?\" + parameters;\n}","map":{"version":3,"sources":["../src/configuration.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { includes, ONE_KILO_BYTE, ONE_SECOND } from './utils';\nexport var DEFAULT_CONFIGURATION = {\n    isCollectingError: true,\n    maxErrorsByMinute: 3000,\n    maxInternalMonitoringMessagesPerPage: 15,\n    resourceSampleRate: 100,\n    sampleRate: 100,\n    silentMultipleInit: false,\n    /**\n     * arbitrary value, byte precision not needed\n     */\n    requestErrorResponseLengthLimit: 32 * ONE_KILO_BYTE,\n    /**\n     * flush automatically, aim to be lower than ALB connection timeout\n     * to maximize connection reuse.\n     */\n    flushTimeout: 30 * ONE_SECOND,\n    /**\n     * Logs intake limit\n     */\n    maxBatchSize: 50,\n    maxMessageSize: 256 * ONE_KILO_BYTE,\n    /**\n     * beacon payload max queue size implementation is 64kb\n     * ensure that we leave room for logs, rum and potential other users\n     */\n    batchBytesLimit: 16 * ONE_KILO_BYTE,\n};\nexport function buildConfiguration(userConfiguration, buildEnv) {\n    var transportConfiguration = {\n        applicationId: userConfiguration.applicationId,\n        buildMode: buildEnv.buildMode,\n        clientToken: userConfiguration.clientToken,\n        datacenter: userConfiguration.datacenter || buildEnv.datacenter,\n        env: userConfiguration.env,\n        proxyHost: userConfiguration.proxyHost,\n        sdkEnv: buildEnv.sdkEnv,\n        sdkVersion: buildEnv.sdkVersion,\n        service: userConfiguration.service,\n        version: userConfiguration.version,\n    };\n    var enableExperimentalFeatures = Array.isArray(userConfiguration.enableExperimentalFeatures)\n        ? userConfiguration.enableExperimentalFeatures\n        : [];\n    var configuration = __assign({ isEnabled: function (feature) {\n            return includes(enableExperimentalFeatures, feature);\n        }, logsEndpoint: getEndpoint('browser', transportConfiguration), rumEndpoint: getEndpoint('rum', transportConfiguration), traceEndpoint: getEndpoint('public-trace', transportConfiguration) }, DEFAULT_CONFIGURATION);\n    if (userConfiguration.internalMonitoringApiKey) {\n        configuration.internalMonitoringEndpoint = getEndpoint('browser', transportConfiguration, 'browser-agent-internal-monitoring');\n    }\n    if ('isCollectingError' in userConfiguration) {\n        configuration.isCollectingError = !!userConfiguration.isCollectingError;\n    }\n    if ('sampleRate' in userConfiguration) {\n        configuration.sampleRate = userConfiguration.sampleRate;\n    }\n    if ('resourceSampleRate' in userConfiguration) {\n        configuration.resourceSampleRate = userConfiguration.resourceSampleRate;\n    }\n    if (transportConfiguration.buildMode === 'e2e-test') {\n        if (userConfiguration.internalMonitoringEndpoint !== undefined) {\n            configuration.internalMonitoringEndpoint = userConfiguration.internalMonitoringEndpoint;\n        }\n        if (userConfiguration.logsEndpoint !== undefined) {\n            configuration.logsEndpoint = userConfiguration.logsEndpoint;\n        }\n        if (userConfiguration.rumEndpoint !== undefined) {\n            configuration.rumEndpoint = userConfiguration.rumEndpoint;\n        }\n    }\n    return configuration;\n}\nfunction getEndpoint(type, conf, source) {\n    var tld = conf.datacenter === 'us' ? 'com' : 'eu';\n    var domain = conf.sdkEnv === 'production' ? \"datadoghq.\" + tld : \"datad0g.\" + tld;\n    var tags = \"sdk_version:\" + conf.sdkVersion +\n        (\"\" + (conf.env ? \",env:\" + conf.env : '')) +\n        (\"\" + (conf.service ? \",service:\" + conf.service : '')) +\n        (\"\" + (conf.version ? \",version:\" + conf.version : ''));\n    var datadogHost = type + \"-http-intake.logs.\" + domain;\n    var host = conf.proxyHost ? conf.proxyHost : datadogHost;\n    var proxyParameter = conf.proxyHost ? \"ddhost=\" + datadogHost + \"&\" : '';\n    var applicationIdParameter = conf.applicationId ? \"_dd.application_id=\" + conf.applicationId + \"&\" : '';\n    var parameters = \"\" + applicationIdParameter + proxyParameter + \"ddsource=\" + (source || 'browser') + \"&ddtags=\" + tags;\n    return \"https://\" + host + \"/v1/input/\" + conf.clientToken + \"?\" + parameters;\n}\n//# sourceMappingURL=configuration.js.map"]},"metadata":{},"sourceType":"module"}