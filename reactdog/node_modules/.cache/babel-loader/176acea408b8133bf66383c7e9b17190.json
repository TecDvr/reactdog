{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { DOM_EVENT, generateUUID, monitor, msToNs, noop, throttle } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\nimport { trackEventCounts } from './trackEventCounts';\nimport { waitIdlePageActivity } from './trackPageActivities';\nexport var ViewLoadingType;\n\n(function (ViewLoadingType) {\n  ViewLoadingType[\"INITIAL_LOAD\"] = \"initial_load\";\n  ViewLoadingType[\"ROUTE_CHANGE\"] = \"route_change\";\n})(ViewLoadingType || (ViewLoadingType = {}));\n\nexport var THROTTLE_VIEW_UPDATE_PERIOD = 3000;\nexport function startViewCollection(location, lifeCycle, session) {\n  var currentLocation = __assign({}, location);\n\n  var startOrigin = 0;\n  var currentView = newView(lifeCycle, currentLocation, session, ViewLoadingType.INITIAL_LOAD, startOrigin); // Renew view on history changes\n\n  trackHistory(function () {\n    if (areDifferentViews(currentLocation, location)) {\n      currentLocation = __assign({}, location);\n      currentView.end();\n      currentView = newView(lifeCycle, currentLocation, session, ViewLoadingType.ROUTE_CHANGE);\n    }\n  }); // Renew view on session renewal\n\n  lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, function () {\n    currentView.end();\n    currentView = newView(lifeCycle, currentLocation, session, ViewLoadingType.ROUTE_CHANGE);\n  }); // End the current view on page unload\n\n  lifeCycle.subscribe(LifeCycleEventType.BEFORE_UNLOAD, function () {\n    currentView.end();\n  });\n}\nexport var viewContext;\n\nfunction newView(lifeCycle, location, session, loadingType, startOrigin) {\n  if (startOrigin === void 0) {\n    startOrigin = performance.now();\n  } // Setup initial values\n\n\n  var id = generateUUID();\n  var measures = {\n    errorCount: 0,\n    longTaskCount: 0,\n    resourceCount: 0,\n    userActionCount: 0\n  };\n  var documentVersion = 0;\n  var loadingTime;\n  viewContext = {\n    id: id,\n    location: location,\n    sessionId: session.getId()\n  }; // Update the view every time the measures are changing\n\n  var _a = throttle(monitor(updateView), THROTTLE_VIEW_UPDATE_PERIOD, {\n    leading: false\n  }),\n      scheduleViewUpdate = _a.throttled,\n      stopScheduleViewUpdate = _a.stop;\n\n  function updateMeasures(newMeasures) {\n    measures = __assign(__assign({}, measures), newMeasures);\n    scheduleViewUpdate();\n  }\n\n  var stopTimingsTracking = trackTimings(lifeCycle, updateMeasures).stop;\n  var stopEventCountsTracking = trackEventCounts(lifeCycle, updateMeasures).stop;\n\n  function updateLoadingTime(loadingTimeValue) {\n    loadingTime = loadingTimeValue;\n    scheduleViewUpdate();\n  }\n\n  var stopLoadingTimeTracking = trackLoadingTime(lifeCycle, loadingType, updateLoadingTime).stop; // Initial view update\n\n  updateView();\n\n  function updateView() {\n    documentVersion += 1;\n    lifeCycle.notify(LifeCycleEventType.VIEW_COLLECTED, {\n      documentVersion: documentVersion,\n      id: id,\n      loadingTime: loadingTime,\n      loadingType: loadingType,\n      location: location,\n      measures: measures,\n      duration: performance.now() - startOrigin,\n      startTime: startOrigin\n    });\n  }\n\n  return {\n    end: function () {\n      stopTimingsTracking();\n      stopEventCountsTracking();\n      stopLoadingTimeTracking(); // prevent pending view updates execution\n\n      stopScheduleViewUpdate(); // Make a final view update\n\n      updateView();\n    }\n  };\n}\n\nfunction trackHistory(onHistoryChange) {\n  var originalPushState = history.pushState;\n  history.pushState = monitor(function () {\n    originalPushState.apply(this, arguments);\n    onHistoryChange();\n  });\n  var originalReplaceState = history.replaceState;\n  history.replaceState = monitor(function () {\n    originalReplaceState.apply(this, arguments);\n    onHistoryChange();\n  });\n  window.addEventListener(DOM_EVENT.POP_STATE, monitor(onHistoryChange));\n}\n\nfunction areDifferentViews(previous, current) {\n  return previous.pathname !== current.pathname;\n}\n\nfunction trackTimings(lifeCycle, callback) {\n  var timings = {};\n  var stopPerformanceTracking = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'navigation') {\n      var navigationEntry = entry;\n      timings = __assign(__assign({}, timings), {\n        domComplete: msToNs(navigationEntry.domComplete),\n        domContentLoaded: msToNs(navigationEntry.domContentLoadedEventEnd),\n        domInteractive: msToNs(navigationEntry.domInteractive),\n        loadEventEnd: msToNs(navigationEntry.loadEventEnd)\n      });\n      callback(timings);\n    } else if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint') {\n      var paintEntry = entry;\n      timings = __assign(__assign({}, timings), {\n        firstContentfulPaint: msToNs(paintEntry.startTime)\n      });\n      callback(timings);\n    }\n  }).unsubscribe;\n  return {\n    stop: stopPerformanceTracking\n  };\n}\n\nfunction trackLoadingTime(lifeCycle, loadingType, callback) {\n  var expectedTiming = 1;\n  var receivedTimings = [];\n  var stopLoadEventLoadingTime = noop;\n\n  if (loadingType === ViewLoadingType.INITIAL_LOAD) {\n    expectedTiming += 1;\n    stopLoadEventLoadingTime = trackLoadEventLoadingTime(lifeCycle, onTimingValue).stop;\n  }\n\n  var stopActivityLoadingTimeTracking = trackActivityLoadingTime(lifeCycle, onTimingValue).stop;\n\n  function onTimingValue(timingValue) {\n    expectedTiming -= 1;\n\n    if (timingValue) {\n      receivedTimings.push(timingValue);\n    }\n\n    if (expectedTiming === 0 && receivedTimings.length) {\n      callback(Math.max.apply(Math, receivedTimings));\n    }\n  }\n\n  return {\n    stop: function () {\n      stopActivityLoadingTimeTracking();\n      stopLoadEventLoadingTime();\n    }\n  };\n}\n\nfunction trackLoadEventLoadingTime(lifeCycle, callback) {\n  var stopPerformanceTracking = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType === 'navigation') {\n      var navigationEntry = entry;\n      callback(navigationEntry.loadEventEnd);\n    }\n  }).unsubscribe;\n  return {\n    stop: stopPerformanceTracking\n  };\n}\n\nfunction trackActivityLoadingTime(lifeCycle, callback) {\n  var startTime = performance.now();\n  var stopWaitIdlePageActivity = waitIdlePageActivity(lifeCycle, function (hadActivity, endTime) {\n    if (hadActivity) {\n      callback(endTime - startTime);\n    } else {\n      callback(undefined);\n    }\n  }).stop;\n  return {\n    stop: stopWaitIdlePageActivity\n  };\n}","map":{"version":3,"sources":["../src/viewCollection.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { DOM_EVENT, generateUUID, monitor, msToNs, noop, throttle } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\nimport { trackEventCounts } from './trackEventCounts';\nimport { waitIdlePageActivity } from './trackPageActivities';\nexport var ViewLoadingType;\n(function (ViewLoadingType) {\n    ViewLoadingType[\"INITIAL_LOAD\"] = \"initial_load\";\n    ViewLoadingType[\"ROUTE_CHANGE\"] = \"route_change\";\n})(ViewLoadingType || (ViewLoadingType = {}));\nexport var THROTTLE_VIEW_UPDATE_PERIOD = 3000;\nexport function startViewCollection(location, lifeCycle, session) {\n    var currentLocation = __assign({}, location);\n    var startOrigin = 0;\n    var currentView = newView(lifeCycle, currentLocation, session, ViewLoadingType.INITIAL_LOAD, startOrigin);\n    // Renew view on history changes\n    trackHistory(function () {\n        if (areDifferentViews(currentLocation, location)) {\n            currentLocation = __assign({}, location);\n            currentView.end();\n            currentView = newView(lifeCycle, currentLocation, session, ViewLoadingType.ROUTE_CHANGE);\n        }\n    });\n    // Renew view on session renewal\n    lifeCycle.subscribe(LifeCycleEventType.SESSION_RENEWED, function () {\n        currentView.end();\n        currentView = newView(lifeCycle, currentLocation, session, ViewLoadingType.ROUTE_CHANGE);\n    });\n    // End the current view on page unload\n    lifeCycle.subscribe(LifeCycleEventType.BEFORE_UNLOAD, function () {\n        currentView.end();\n    });\n}\nexport var viewContext;\nfunction newView(lifeCycle, location, session, loadingType, startOrigin) {\n    if (startOrigin === void 0) { startOrigin = performance.now(); }\n    // Setup initial values\n    var id = generateUUID();\n    var measures = {\n        errorCount: 0,\n        longTaskCount: 0,\n        resourceCount: 0,\n        userActionCount: 0,\n    };\n    var documentVersion = 0;\n    var loadingTime;\n    viewContext = { id: id, location: location, sessionId: session.getId() };\n    // Update the view every time the measures are changing\n    var _a = throttle(monitor(updateView), THROTTLE_VIEW_UPDATE_PERIOD, {\n        leading: false,\n    }), scheduleViewUpdate = _a.throttled, stopScheduleViewUpdate = _a.stop;\n    function updateMeasures(newMeasures) {\n        measures = __assign(__assign({}, measures), newMeasures);\n        scheduleViewUpdate();\n    }\n    var stopTimingsTracking = trackTimings(lifeCycle, updateMeasures).stop;\n    var stopEventCountsTracking = trackEventCounts(lifeCycle, updateMeasures).stop;\n    function updateLoadingTime(loadingTimeValue) {\n        loadingTime = loadingTimeValue;\n        scheduleViewUpdate();\n    }\n    var stopLoadingTimeTracking = trackLoadingTime(lifeCycle, loadingType, updateLoadingTime).stop;\n    // Initial view update\n    updateView();\n    function updateView() {\n        documentVersion += 1;\n        lifeCycle.notify(LifeCycleEventType.VIEW_COLLECTED, {\n            documentVersion: documentVersion,\n            id: id,\n            loadingTime: loadingTime,\n            loadingType: loadingType,\n            location: location,\n            measures: measures,\n            duration: performance.now() - startOrigin,\n            startTime: startOrigin,\n        });\n    }\n    return {\n        end: function () {\n            stopTimingsTracking();\n            stopEventCountsTracking();\n            stopLoadingTimeTracking();\n            // prevent pending view updates execution\n            stopScheduleViewUpdate();\n            // Make a final view update\n            updateView();\n        },\n    };\n}\nfunction trackHistory(onHistoryChange) {\n    var originalPushState = history.pushState;\n    history.pushState = monitor(function () {\n        originalPushState.apply(this, arguments);\n        onHistoryChange();\n    });\n    var originalReplaceState = history.replaceState;\n    history.replaceState = monitor(function () {\n        originalReplaceState.apply(this, arguments);\n        onHistoryChange();\n    });\n    window.addEventListener(DOM_EVENT.POP_STATE, monitor(onHistoryChange));\n}\nfunction areDifferentViews(previous, current) {\n    return previous.pathname !== current.pathname;\n}\nfunction trackTimings(lifeCycle, callback) {\n    var timings = {};\n    var stopPerformanceTracking = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n        if (entry.entryType === 'navigation') {\n            var navigationEntry = entry;\n            timings = __assign(__assign({}, timings), { domComplete: msToNs(navigationEntry.domComplete), domContentLoaded: msToNs(navigationEntry.domContentLoadedEventEnd), domInteractive: msToNs(navigationEntry.domInteractive), loadEventEnd: msToNs(navigationEntry.loadEventEnd) });\n            callback(timings);\n        }\n        else if (entry.entryType === 'paint' && entry.name === 'first-contentful-paint') {\n            var paintEntry = entry;\n            timings = __assign(__assign({}, timings), { firstContentfulPaint: msToNs(paintEntry.startTime) });\n            callback(timings);\n        }\n    }).unsubscribe;\n    return { stop: stopPerformanceTracking };\n}\nfunction trackLoadingTime(lifeCycle, loadingType, callback) {\n    var expectedTiming = 1;\n    var receivedTimings = [];\n    var stopLoadEventLoadingTime = noop;\n    if (loadingType === ViewLoadingType.INITIAL_LOAD) {\n        expectedTiming += 1;\n        (stopLoadEventLoadingTime = trackLoadEventLoadingTime(lifeCycle, onTimingValue).stop);\n    }\n    var stopActivityLoadingTimeTracking = trackActivityLoadingTime(lifeCycle, onTimingValue).stop;\n    function onTimingValue(timingValue) {\n        expectedTiming -= 1;\n        if (timingValue) {\n            receivedTimings.push(timingValue);\n        }\n        if (expectedTiming === 0 && receivedTimings.length) {\n            callback(Math.max.apply(Math, receivedTimings));\n        }\n    }\n    return {\n        stop: function () {\n            stopActivityLoadingTimeTracking();\n            stopLoadEventLoadingTime();\n        },\n    };\n}\nfunction trackLoadEventLoadingTime(lifeCycle, callback) {\n    var stopPerformanceTracking = lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n        if (entry.entryType === 'navigation') {\n            var navigationEntry = entry;\n            callback(navigationEntry.loadEventEnd);\n        }\n    }).unsubscribe;\n    return { stop: stopPerformanceTracking };\n}\nfunction trackActivityLoadingTime(lifeCycle, callback) {\n    var startTime = performance.now();\n    var stopWaitIdlePageActivity = waitIdlePageActivity(lifeCycle, function (hadActivity, endTime) {\n        if (hadActivity) {\n            callback(endTime - startTime);\n        }\n        else {\n            callback(undefined);\n        }\n    }).stop;\n    return { stop: stopWaitIdlePageActivity };\n}\n//# sourceMappingURL=viewCollection.js.map"]},"metadata":{},"sourceType":"module"}