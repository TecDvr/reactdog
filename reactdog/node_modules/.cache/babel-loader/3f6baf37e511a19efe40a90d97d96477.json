{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Batch, deepMerge, getTimestamp, HttpRequest, includes, monitor, msToNs, RequestType, ResourceKind, withSnakeCaseKeys } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\nimport { matchRequestTiming } from './matchRequestTiming';\nimport { computePerformanceResourceDetails, computePerformanceResourceDuration, computeResourceKind, computeSize, isValidResource } from './resourceUtils';\nimport { getUserActionReference, UserActionType } from './userActionCollection';\nimport { viewContext } from './viewCollection';\nexport var RumEventCategory;\n\n(function (RumEventCategory) {\n  RumEventCategory[\"USER_ACTION\"] = \"user_action\";\n  RumEventCategory[\"ERROR\"] = \"error\";\n  RumEventCategory[\"LONG_TASK\"] = \"long_task\";\n  RumEventCategory[\"VIEW\"] = \"view\";\n  RumEventCategory[\"RESOURCE\"] = \"resource\";\n})(RumEventCategory || (RumEventCategory = {}));\n\nvar SessionType;\n\n(function (SessionType) {\n  SessionType[\"SYNTHETICS\"] = \"synthetics\";\n  SessionType[\"USER\"] = \"user\";\n})(SessionType || (SessionType = {}));\n\nexport function startRum(applicationId, lifeCycle, configuration, session, internalMonitoring) {\n  var globalContext = {};\n  internalMonitoring.setExternalContextProvider(function () {\n    return deepMerge({\n      application_id: applicationId,\n      session_id: viewContext.sessionId,\n      view: {\n        id: viewContext.id\n      }\n    }, globalContext);\n  });\n  var batch = startRumBatch(configuration, session, function () {\n    return {\n      applicationId: applicationId,\n      date: new Date().getTime(),\n      session: {\n        // must be computed on each event because synthetics instrumentation can be done after sdk execution\n        // cf https://github.com/puppeteer/puppeteer/issues/3667\n        type: getSessionType()\n      },\n      sessionId: viewContext.sessionId,\n      view: {\n        id: viewContext.id,\n        referrer: document.referrer,\n        url: viewContext.location.href\n      }\n    };\n  }, function () {\n    return globalContext;\n  }, function () {\n    return lifeCycle.notify(LifeCycleEventType.BEFORE_UNLOAD);\n  });\n  trackView(lifeCycle, batch.upsertRumEvent);\n  trackErrors(lifeCycle, batch.addRumEvent);\n  trackRequests(configuration, lifeCycle, session, batch.addRumEvent);\n  trackPerformanceTiming(configuration, lifeCycle, batch.addRumEvent);\n  trackCustomUserAction(lifeCycle, batch.addRumEvent);\n  trackAutoUserAction(lifeCycle, batch.addRumEvent);\n  return {\n    addRumGlobalContext: monitor(function (key, value) {\n      globalContext[key] = value;\n    }),\n    addUserAction: monitor(function (name, context) {\n      lifeCycle.notify(LifeCycleEventType.USER_ACTION_COLLECTED, {\n        context: context,\n        name: name,\n        type: UserActionType.CUSTOM\n      });\n    }),\n    getInternalContext: monitor(function () {\n      return {\n        application_id: applicationId,\n        session_id: viewContext.sessionId,\n        user_action: getUserActionReference(),\n        view: {\n          id: viewContext.id\n        }\n      };\n    }),\n    setRumGlobalContext: monitor(function (context) {\n      globalContext = context;\n    })\n  };\n}\n\nfunction startRumBatch(configuration, session, rumContextProvider, globalContextProvider, beforeUnloadCallback) {\n  var batch = new Batch(new HttpRequest(configuration.rumEndpoint, configuration.batchBytesLimit, true), configuration.maxBatchSize, configuration.batchBytesLimit, configuration.maxMessageSize, configuration.flushTimeout, function () {\n    return deepMerge(withSnakeCaseKeys(rumContextProvider()), globalContextProvider());\n  }, beforeUnloadCallback);\n  return {\n    addRumEvent: function (event, context) {\n      if (session.isTracked()) {\n        batch.add(__assign(__assign({}, context), withSnakeCaseKeys(event)));\n      }\n    },\n    upsertRumEvent: function (event, key) {\n      if (session.isTracked()) {\n        batch.upsert(withSnakeCaseKeys(event), key);\n      }\n    }\n  };\n}\n\nfunction trackView(lifeCycle, upsertRumEvent) {\n  lifeCycle.subscribe(LifeCycleEventType.VIEW_COLLECTED, function (view) {\n    upsertRumEvent({\n      date: getTimestamp(view.startTime),\n      duration: msToNs(view.duration),\n      evt: {\n        category: RumEventCategory.VIEW\n      },\n      rum: {\n        documentVersion: view.documentVersion\n      },\n      view: {\n        loadingTime: view.loadingTime ? msToNs(view.loadingTime) : undefined,\n        loadingType: view.loadingType,\n        measures: view.measures\n      }\n    }, view.id);\n  });\n}\n\nfunction trackErrors(lifeCycle, addRumEvent) {\n  lifeCycle.subscribe(LifeCycleEventType.ERROR_COLLECTED, function (_a) {\n    var message = _a.message,\n        startTime = _a.startTime,\n        context = _a.context;\n    addRumEvent(__assign({\n      message: message,\n      date: getTimestamp(startTime),\n      evt: {\n        category: RumEventCategory.ERROR\n      },\n      userAction: getUserActionReference(startTime)\n    }, context));\n  });\n}\n\nfunction trackCustomUserAction(lifeCycle, addRumEvent) {\n  lifeCycle.subscribe(LifeCycleEventType.USER_ACTION_COLLECTED, function (userAction) {\n    if (userAction.type === UserActionType.CUSTOM) {\n      addRumEvent({\n        evt: {\n          category: RumEventCategory.USER_ACTION,\n          name: userAction.name\n        },\n        userAction: {\n          type: userAction.type\n        }\n      }, userAction.context);\n    }\n  });\n}\n\nfunction trackAutoUserAction(lifeCycle, addRumEvent) {\n  lifeCycle.subscribe(LifeCycleEventType.USER_ACTION_COLLECTED, function (userAction) {\n    if (userAction.type !== UserActionType.CUSTOM) {\n      addRumEvent({\n        date: getTimestamp(userAction.startTime),\n        duration: msToNs(userAction.duration),\n        evt: {\n          category: RumEventCategory.USER_ACTION,\n          name: userAction.name\n        },\n        userAction: {\n          id: userAction.id,\n          measures: userAction.measures,\n          type: userAction.type\n        }\n      });\n    }\n  });\n}\n\nexport function trackRequests(configuration, lifeCycle, session, addRumEvent) {\n  lifeCycle.subscribe(LifeCycleEventType.REQUEST_COMPLETED, function (request) {\n    if (!session.isTrackedWithResource()) {\n      return;\n    }\n\n    if (!isValidResource(request.url, configuration)) {\n      return;\n    }\n\n    var timing = matchRequestTiming(request);\n    var kind = request.type === RequestType.XHR ? ResourceKind.XHR : ResourceKind.FETCH;\n    var startTime = timing ? timing.startTime : request.startTime;\n    addRumEvent({\n      date: getTimestamp(startTime),\n      duration: timing ? computePerformanceResourceDuration(timing) : msToNs(request.duration),\n      evt: {\n        category: RumEventCategory.RESOURCE\n      },\n      http: {\n        method: request.method,\n        performance: timing ? computePerformanceResourceDetails(timing) : undefined,\n        statusCode: request.status,\n        url: request.url\n      },\n      network: {\n        bytesWritten: timing ? computeSize(timing) : undefined\n      },\n      resource: {\n        kind: kind\n      },\n      traceId: request.traceId,\n      userAction: getUserActionReference(startTime)\n    });\n    lifeCycle.notify(LifeCycleEventType.RESOURCE_ADDED_TO_BATCH);\n  });\n}\n\nfunction trackPerformanceTiming(configuration, lifeCycle, addRumEvent) {\n  lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    switch (entry.entryType) {\n      case 'resource':\n        handleResourceEntry(configuration, entry, addRumEvent, lifeCycle);\n        break;\n\n      case 'longtask':\n        handleLongTaskEntry(entry, addRumEvent);\n        break;\n\n      default:\n        break;\n    }\n  });\n}\n\nexport function handleResourceEntry(configuration, entry, addRumEvent, lifeCycle) {\n  if (!isValidResource(entry.name, configuration)) {\n    return;\n  }\n\n  var resourceKind = computeResourceKind(entry);\n\n  if (includes([ResourceKind.XHR, ResourceKind.FETCH], resourceKind)) {\n    return;\n  }\n\n  addRumEvent({\n    date: getTimestamp(entry.startTime),\n    duration: computePerformanceResourceDuration(entry),\n    evt: {\n      category: RumEventCategory.RESOURCE\n    },\n    http: {\n      performance: computePerformanceResourceDetails(entry),\n      url: entry.name\n    },\n    network: {\n      bytesWritten: computeSize(entry)\n    },\n    resource: {\n      kind: resourceKind\n    },\n    userAction: getUserActionReference(entry.startTime)\n  });\n  lifeCycle.notify(LifeCycleEventType.RESOURCE_ADDED_TO_BATCH);\n}\nexport function handleLongTaskEntry(entry, addRumEvent) {\n  addRumEvent({\n    date: getTimestamp(entry.startTime),\n    duration: msToNs(entry.duration),\n    evt: {\n      category: RumEventCategory.LONG_TASK\n    },\n    userAction: getUserActionReference(entry.startTime)\n  });\n}\n\nfunction getSessionType() {\n  return window._DATADOG_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;\n}","map":{"version":3,"sources":["../src/rum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { Batch, deepMerge, getTimestamp, HttpRequest, includes, monitor, msToNs, RequestType, ResourceKind, withSnakeCaseKeys, } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\nimport { matchRequestTiming } from './matchRequestTiming';\nimport { computePerformanceResourceDetails, computePerformanceResourceDuration, computeResourceKind, computeSize, isValidResource, } from './resourceUtils';\nimport { getUserActionReference, UserActionType } from './userActionCollection';\nimport { viewContext } from './viewCollection';\nexport var RumEventCategory;\n(function (RumEventCategory) {\n    RumEventCategory[\"USER_ACTION\"] = \"user_action\";\n    RumEventCategory[\"ERROR\"] = \"error\";\n    RumEventCategory[\"LONG_TASK\"] = \"long_task\";\n    RumEventCategory[\"VIEW\"] = \"view\";\n    RumEventCategory[\"RESOURCE\"] = \"resource\";\n})(RumEventCategory || (RumEventCategory = {}));\nvar SessionType;\n(function (SessionType) {\n    SessionType[\"SYNTHETICS\"] = \"synthetics\";\n    SessionType[\"USER\"] = \"user\";\n})(SessionType || (SessionType = {}));\nexport function startRum(applicationId, lifeCycle, configuration, session, internalMonitoring) {\n    var globalContext = {};\n    internalMonitoring.setExternalContextProvider(function () {\n        return deepMerge({\n            application_id: applicationId,\n            session_id: viewContext.sessionId,\n            view: {\n                id: viewContext.id,\n            },\n        }, globalContext);\n    });\n    var batch = startRumBatch(configuration, session, function () { return ({\n        applicationId: applicationId,\n        date: new Date().getTime(),\n        session: {\n            // must be computed on each event because synthetics instrumentation can be done after sdk execution\n            // cf https://github.com/puppeteer/puppeteer/issues/3667\n            type: getSessionType(),\n        },\n        sessionId: viewContext.sessionId,\n        view: {\n            id: viewContext.id,\n            referrer: document.referrer,\n            url: viewContext.location.href,\n        },\n    }); }, function () { return globalContext; }, function () { return lifeCycle.notify(LifeCycleEventType.BEFORE_UNLOAD); });\n    trackView(lifeCycle, batch.upsertRumEvent);\n    trackErrors(lifeCycle, batch.addRumEvent);\n    trackRequests(configuration, lifeCycle, session, batch.addRumEvent);\n    trackPerformanceTiming(configuration, lifeCycle, batch.addRumEvent);\n    trackCustomUserAction(lifeCycle, batch.addRumEvent);\n    trackAutoUserAction(lifeCycle, batch.addRumEvent);\n    return {\n        addRumGlobalContext: monitor(function (key, value) {\n            globalContext[key] = value;\n        }),\n        addUserAction: monitor(function (name, context) {\n            lifeCycle.notify(LifeCycleEventType.USER_ACTION_COLLECTED, { context: context, name: name, type: UserActionType.CUSTOM });\n        }),\n        getInternalContext: monitor(function () {\n            return {\n                application_id: applicationId,\n                session_id: viewContext.sessionId,\n                user_action: getUserActionReference(),\n                view: {\n                    id: viewContext.id,\n                },\n            };\n        }),\n        setRumGlobalContext: monitor(function (context) {\n            globalContext = context;\n        }),\n    };\n}\nfunction startRumBatch(configuration, session, rumContextProvider, globalContextProvider, beforeUnloadCallback) {\n    var batch = new Batch(new HttpRequest(configuration.rumEndpoint, configuration.batchBytesLimit, true), configuration.maxBatchSize, configuration.batchBytesLimit, configuration.maxMessageSize, configuration.flushTimeout, function () { return deepMerge(withSnakeCaseKeys(rumContextProvider()), globalContextProvider()); }, beforeUnloadCallback);\n    return {\n        addRumEvent: function (event, context) {\n            if (session.isTracked()) {\n                batch.add(__assign(__assign({}, context), withSnakeCaseKeys(event)));\n            }\n        },\n        upsertRumEvent: function (event, key) {\n            if (session.isTracked()) {\n                batch.upsert(withSnakeCaseKeys(event), key);\n            }\n        },\n    };\n}\nfunction trackView(lifeCycle, upsertRumEvent) {\n    lifeCycle.subscribe(LifeCycleEventType.VIEW_COLLECTED, function (view) {\n        upsertRumEvent({\n            date: getTimestamp(view.startTime),\n            duration: msToNs(view.duration),\n            evt: {\n                category: RumEventCategory.VIEW,\n            },\n            rum: {\n                documentVersion: view.documentVersion,\n            },\n            view: {\n                loadingTime: view.loadingTime ? msToNs(view.loadingTime) : undefined,\n                loadingType: view.loadingType,\n                measures: view.measures,\n            },\n        }, view.id);\n    });\n}\nfunction trackErrors(lifeCycle, addRumEvent) {\n    lifeCycle.subscribe(LifeCycleEventType.ERROR_COLLECTED, function (_a) {\n        var message = _a.message, startTime = _a.startTime, context = _a.context;\n        addRumEvent(__assign({ message: message, date: getTimestamp(startTime), evt: {\n                category: RumEventCategory.ERROR,\n            }, userAction: getUserActionReference(startTime) }, context));\n    });\n}\nfunction trackCustomUserAction(lifeCycle, addRumEvent) {\n    lifeCycle.subscribe(LifeCycleEventType.USER_ACTION_COLLECTED, function (userAction) {\n        if (userAction.type === UserActionType.CUSTOM) {\n            addRumEvent({\n                evt: {\n                    category: RumEventCategory.USER_ACTION,\n                    name: userAction.name,\n                },\n                userAction: {\n                    type: userAction.type,\n                },\n            }, userAction.context);\n        }\n    });\n}\nfunction trackAutoUserAction(lifeCycle, addRumEvent) {\n    lifeCycle.subscribe(LifeCycleEventType.USER_ACTION_COLLECTED, function (userAction) {\n        if (userAction.type !== UserActionType.CUSTOM) {\n            addRumEvent({\n                date: getTimestamp(userAction.startTime),\n                duration: msToNs(userAction.duration),\n                evt: {\n                    category: RumEventCategory.USER_ACTION,\n                    name: userAction.name,\n                },\n                userAction: {\n                    id: userAction.id,\n                    measures: userAction.measures,\n                    type: userAction.type,\n                },\n            });\n        }\n    });\n}\nexport function trackRequests(configuration, lifeCycle, session, addRumEvent) {\n    lifeCycle.subscribe(LifeCycleEventType.REQUEST_COMPLETED, function (request) {\n        if (!session.isTrackedWithResource()) {\n            return;\n        }\n        if (!isValidResource(request.url, configuration)) {\n            return;\n        }\n        var timing = matchRequestTiming(request);\n        var kind = request.type === RequestType.XHR ? ResourceKind.XHR : ResourceKind.FETCH;\n        var startTime = timing ? timing.startTime : request.startTime;\n        addRumEvent({\n            date: getTimestamp(startTime),\n            duration: timing ? computePerformanceResourceDuration(timing) : msToNs(request.duration),\n            evt: {\n                category: RumEventCategory.RESOURCE,\n            },\n            http: {\n                method: request.method,\n                performance: timing ? computePerformanceResourceDetails(timing) : undefined,\n                statusCode: request.status,\n                url: request.url,\n            },\n            network: {\n                bytesWritten: timing ? computeSize(timing) : undefined,\n            },\n            resource: {\n                kind: kind,\n            },\n            traceId: request.traceId,\n            userAction: getUserActionReference(startTime),\n        });\n        lifeCycle.notify(LifeCycleEventType.RESOURCE_ADDED_TO_BATCH);\n    });\n}\nfunction trackPerformanceTiming(configuration, lifeCycle, addRumEvent) {\n    lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n        switch (entry.entryType) {\n            case 'resource':\n                handleResourceEntry(configuration, entry, addRumEvent, lifeCycle);\n                break;\n            case 'longtask':\n                handleLongTaskEntry(entry, addRumEvent);\n                break;\n            default:\n                break;\n        }\n    });\n}\nexport function handleResourceEntry(configuration, entry, addRumEvent, lifeCycle) {\n    if (!isValidResource(entry.name, configuration)) {\n        return;\n    }\n    var resourceKind = computeResourceKind(entry);\n    if (includes([ResourceKind.XHR, ResourceKind.FETCH], resourceKind)) {\n        return;\n    }\n    addRumEvent({\n        date: getTimestamp(entry.startTime),\n        duration: computePerformanceResourceDuration(entry),\n        evt: {\n            category: RumEventCategory.RESOURCE,\n        },\n        http: {\n            performance: computePerformanceResourceDetails(entry),\n            url: entry.name,\n        },\n        network: {\n            bytesWritten: computeSize(entry),\n        },\n        resource: {\n            kind: resourceKind,\n        },\n        userAction: getUserActionReference(entry.startTime),\n    });\n    lifeCycle.notify(LifeCycleEventType.RESOURCE_ADDED_TO_BATCH);\n}\nexport function handleLongTaskEntry(entry, addRumEvent) {\n    addRumEvent({\n        date: getTimestamp(entry.startTime),\n        duration: msToNs(entry.duration),\n        evt: {\n            category: RumEventCategory.LONG_TASK,\n        },\n        userAction: getUserActionReference(entry.startTime),\n    });\n}\nfunction getSessionType() {\n    return window._DATADOG_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;\n}\n//# sourceMappingURL=rum.js.map"]},"metadata":{},"sourceType":"module"}