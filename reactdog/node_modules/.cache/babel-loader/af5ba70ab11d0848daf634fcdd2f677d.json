{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { buildConfiguration } from './configuration';\nimport { areCookiesAuthorized } from './cookie';\nimport { startErrorCollection } from './errorCollection';\nimport { setDebugMode, startInternalMonitoring } from './internalMonitoring';\nexport function makeStub(methodName) {\n  console.warn(\"'\" + methodName + \"' not yet available, please call '.init()' first.\");\n}\nexport function makeGlobal(stub) {\n  var global = __assign({}, stub); // Add an \"hidden\" property to set debug mode. We define it that way to hide it\n  // as much as possible but of course it's not a real protection.\n\n\n  Object.defineProperty(global, '_setDebug', {\n    get: function () {\n      return setDebugMode;\n    },\n    enumerable: false\n  });\n  return global;\n}\nexport function commonInit(userConfiguration, buildEnv) {\n  var configuration = buildConfiguration(userConfiguration, buildEnv);\n  var internalMonitoring = startInternalMonitoring(configuration);\n  var errorObservable = startErrorCollection(configuration);\n  return {\n    configuration: configuration,\n    errorObservable: errorObservable,\n    internalMonitoring: internalMonitoring\n  };\n}\nexport function checkCookiesAuthorized() {\n  if (!areCookiesAuthorized()) {\n    console.warn('Cookies are not authorized, we will not send any data.');\n    return false;\n  }\n\n  return true;\n}\nexport function checkIsNotLocalFile() {\n  if (isLocalFile()) {\n    console.error('Execution is not allowed in the current context.');\n    return false;\n  }\n\n  return true;\n}\n\nfunction isLocalFile() {\n  return window.location.protocol === 'file:';\n}","map":{"version":3,"sources":["../src/init.ts"],"names":[],"mappings":";AAAA,SAAS,kBAAT,QAAsD,iBAAtD;AACA,SAAS,oBAAT,QAAqC,UAArC;AACA,SAAS,oBAAT,QAAqC,mBAArC;AACA,SAAS,YAAT,EAAuB,uBAAvB,QAAsD,sBAAtD;AAEA,OAAM,SAAU,QAAV,CAAmB,UAAnB,EAAqC;AACzC,EAAA,OAAO,CAAC,IAAR,CAAa,MAAI,UAAJ,GAAc,mDAA3B;AACD;AAED,OAAM,SAAU,UAAV,CAAwB,IAAxB,EAA+B;AACnC,MAAM,MAAM,GAAA,QAAA,CAAA,EAAA,EAAQ,IAAR,CAAZ,CADmC,CAGnC;AACA;;;AACA,EAAA,MAAM,CAAC,cAAP,CAAsB,MAAtB,EAA8B,WAA9B,EAA2C;AACzC,IAAA,GAAG,EAAA,YAAA;AACD,aAAO,YAAP;AACD,KAHwC;AAIzC,IAAA,UAAU,EAAE;AAJ6B,GAA3C;AAOA,SAAO,MAAP;AACD;AAaD,OAAM,SAAU,UAAV,CAAqB,iBAArB,EAA2D,QAA3D,EAA6E;AACjF,MAAM,aAAa,GAAG,kBAAkB,CAAC,iBAAD,EAAoB,QAApB,CAAxC;AACA,MAAM,kBAAkB,GAAG,uBAAuB,CAAC,aAAD,CAAlD;AACA,MAAM,eAAe,GAAG,oBAAoB,CAAC,aAAD,CAA5C;AAEA,SAAO;AACL,IAAA,aAAa,EAAA,aADR;AAEL,IAAA,eAAe,EAAA,eAFV;AAGL,IAAA,kBAAkB,EAAA;AAHb,GAAP;AAKD;AAED,OAAM,SAAU,sBAAV,GAAgC;AACpC,MAAI,CAAC,oBAAoB,EAAzB,EAA6B;AAC3B,IAAA,OAAO,CAAC,IAAR,CAAa,wDAAb;AACA,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED,OAAM,SAAU,mBAAV,GAA6B;AACjC,MAAI,WAAW,EAAf,EAAmB;AACjB,IAAA,OAAO,CAAC,KAAR,CAAc,kDAAd;AACA,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAAS,WAAT,GAAoB;AAClB,SAAO,MAAM,CAAC,QAAP,CAAgB,QAAhB,KAA6B,OAApC;AACD","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { buildConfiguration } from './configuration';\nimport { areCookiesAuthorized } from './cookie';\nimport { startErrorCollection } from './errorCollection';\nimport { setDebugMode, startInternalMonitoring } from './internalMonitoring';\nexport function makeStub(methodName) {\n    console.warn(\"'\" + methodName + \"' not yet available, please call '.init()' first.\");\n}\nexport function makeGlobal(stub) {\n    var global = __assign({}, stub);\n    // Add an \"hidden\" property to set debug mode. We define it that way to hide it\n    // as much as possible but of course it's not a real protection.\n    Object.defineProperty(global, '_setDebug', {\n        get: function () {\n            return setDebugMode;\n        },\n        enumerable: false,\n    });\n    return global;\n}\nexport function commonInit(userConfiguration, buildEnv) {\n    var configuration = buildConfiguration(userConfiguration, buildEnv);\n    var internalMonitoring = startInternalMonitoring(configuration);\n    var errorObservable = startErrorCollection(configuration);\n    return {\n        configuration: configuration,\n        errorObservable: errorObservable,\n        internalMonitoring: internalMonitoring,\n    };\n}\nexport function checkCookiesAuthorized() {\n    if (!areCookiesAuthorized()) {\n        console.warn('Cookies are not authorized, we will not send any data.');\n        return false;\n    }\n    return true;\n}\nexport function checkIsNotLocalFile() {\n    if (isLocalFile()) {\n        console.error('Execution is not allowed in the current context.');\n        return false;\n    }\n    return true;\n}\nfunction isLocalFile() {\n    return window.location.protocol === 'file:';\n}\n//# sourceMappingURL=init.js.map"]},"metadata":{},"sourceType":"module"}