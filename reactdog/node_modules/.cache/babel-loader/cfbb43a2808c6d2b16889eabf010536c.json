{"ast":null,"code":"import { monitor, Observable } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle'; // Delay to wait for a page activity to validate the tracking process\n\nexport var PAGE_ACTIVITY_VALIDATION_DELAY = 100; // Delay to wait after a page activity to end the tracking process\n\nexport var PAGE_ACTIVITY_END_DELAY = 100; // Maximum duration of the tracking process\n\nexport var PAGE_ACTIVITY_MAX_DURATION = 10000;\nexport function waitIdlePageActivity(lifeCycle, completionCallback) {\n  var _a = trackPageActivities(lifeCycle),\n      pageActivitiesObservable = _a.observable,\n      stopPageActivitiesTracking = _a.stop;\n\n  var stopWaitPageActivitiesCompletion = waitPageActivitiesCompletion(pageActivitiesObservable, stopPageActivitiesTracking, completionCallback).stop;\n\n  function stop() {\n    stopWaitPageActivitiesCompletion();\n    stopPageActivitiesTracking();\n  }\n\n  return {\n    stop: stop\n  };\n} // Automatic user action collection lifecycle overview:\n//                      (Start new trackPageActivities)\n//              .-------------------'--------------------.\n//              v                                        v\n//     [Wait for a page activity ]          [Wait for a maximum duration]\n//     [timeout: VALIDATION_DELAY]          [  timeout: MAX_DURATION    ]\n//          /                  \\                           |\n//         v                    v                          |\n//  [No page activity]   [Page activity]                   |\n//         |                   |,----------------------.   |\n//         v                   v                       |   |\n//     (Discard)     [Wait for a page activity]        |   |\n//                   [   timeout: END_DELAY   ]        |   |\n//                       /                \\            |   |\n//                      v                  v           |   |\n//             [No page activity]    [Page activity]   |   |\n//                      |                 |            |   |\n//                      |                 '------------'   |\n//                      '-----------. ,--------------------'\n//                                   v\n//                                 (End)\n//\n// Note: because MAX_DURATION > VALIDATION_DELAY, we are sure that if the process is still alive\n// after MAX_DURATION, it has been validated.\n\nexport function trackPageActivities(lifeCycle) {\n  var observable = new Observable();\n  var subscriptions = [];\n  var firstRequestId;\n  var pendingRequestsCount = 0;\n  subscriptions.push(lifeCycle.subscribe(LifeCycleEventType.DOM_MUTATED, function () {\n    return notifyPageActivity();\n  }));\n  subscriptions.push(lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n    if (entry.entryType !== 'resource') {\n      return;\n    }\n\n    notifyPageActivity();\n  }));\n  subscriptions.push(lifeCycle.subscribe(LifeCycleEventType.REQUEST_STARTED, function (startEvent) {\n    if (firstRequestId === undefined) {\n      firstRequestId = startEvent.requestId;\n    }\n\n    pendingRequestsCount += 1;\n    notifyPageActivity();\n  }));\n  subscriptions.push(lifeCycle.subscribe(LifeCycleEventType.REQUEST_COMPLETED, function (request) {\n    // If the request started before the tracking start, ignore it\n    if (firstRequestId === undefined || request.requestId < firstRequestId) {\n      return;\n    }\n\n    pendingRequestsCount -= 1;\n    notifyPageActivity();\n  }));\n\n  function notifyPageActivity() {\n    observable.notify({\n      isBusy: pendingRequestsCount > 0\n    });\n  }\n\n  return {\n    observable: observable,\n    stop: function () {\n      subscriptions.forEach(function (s) {\n        return s.unsubscribe();\n      });\n    }\n  };\n}\nexport function waitPageActivitiesCompletion(pageActivitiesObservable, stopPageActivitiesTracking, completionCallback) {\n  var idleTimeoutId;\n  var hasCompleted = false;\n  var validationTimeoutId = setTimeout(monitor(function () {\n    return complete(false, 0);\n  }), PAGE_ACTIVITY_VALIDATION_DELAY);\n  var maxDurationTimeoutId = setTimeout(monitor(function () {\n    return complete(true, performance.now());\n  }), PAGE_ACTIVITY_MAX_DURATION);\n  pageActivitiesObservable.subscribe(function (_a) {\n    var isBusy = _a.isBusy;\n    clearTimeout(validationTimeoutId);\n    clearTimeout(idleTimeoutId);\n    var lastChangeTime = performance.now();\n\n    if (!isBusy) {\n      idleTimeoutId = setTimeout(monitor(function () {\n        return complete(true, lastChangeTime);\n      }), PAGE_ACTIVITY_END_DELAY);\n    }\n  });\n\n  function stop() {\n    hasCompleted = true;\n    clearTimeout(validationTimeoutId);\n    clearTimeout(idleTimeoutId);\n    clearTimeout(maxDurationTimeoutId);\n    stopPageActivitiesTracking();\n  }\n\n  function complete(hadActivity, endTime) {\n    if (hasCompleted) {\n      return;\n    }\n\n    stop();\n    completionCallback(hadActivity, endTime);\n  }\n\n  return {\n    stop: stop\n  };\n}","map":{"version":3,"sources":["../src/trackPageActivities.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { monitor, Observable } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\n// Delay to wait for a page activity to validate the tracking process\nexport var PAGE_ACTIVITY_VALIDATION_DELAY = 100;\n// Delay to wait after a page activity to end the tracking process\nexport var PAGE_ACTIVITY_END_DELAY = 100;\n// Maximum duration of the tracking process\nexport var PAGE_ACTIVITY_MAX_DURATION = 10000;\nexport function waitIdlePageActivity(lifeCycle, completionCallback) {\n    var _a = trackPageActivities(lifeCycle), pageActivitiesObservable = _a.observable, stopPageActivitiesTracking = _a.stop;\n    var stopWaitPageActivitiesCompletion = waitPageActivitiesCompletion(pageActivitiesObservable, stopPageActivitiesTracking, completionCallback).stop;\n    function stop() {\n        stopWaitPageActivitiesCompletion();\n        stopPageActivitiesTracking();\n    }\n    return { stop: stop };\n}\n// Automatic user action collection lifecycle overview:\n//                      (Start new trackPageActivities)\n//              .-------------------'--------------------.\n//              v                                        v\n//     [Wait for a page activity ]          [Wait for a maximum duration]\n//     [timeout: VALIDATION_DELAY]          [  timeout: MAX_DURATION    ]\n//          /                  \\                           |\n//         v                    v                          |\n//  [No page activity]   [Page activity]                   |\n//         |                   |,----------------------.   |\n//         v                   v                       |   |\n//     (Discard)     [Wait for a page activity]        |   |\n//                   [   timeout: END_DELAY   ]        |   |\n//                       /                \\            |   |\n//                      v                  v           |   |\n//             [No page activity]    [Page activity]   |   |\n//                      |                 |            |   |\n//                      |                 '------------'   |\n//                      '-----------. ,--------------------'\n//                                   v\n//                                 (End)\n//\n// Note: because MAX_DURATION > VALIDATION_DELAY, we are sure that if the process is still alive\n// after MAX_DURATION, it has been validated.\nexport function trackPageActivities(lifeCycle) {\n    var observable = new Observable();\n    var subscriptions = [];\n    var firstRequestId;\n    var pendingRequestsCount = 0;\n    subscriptions.push(lifeCycle.subscribe(LifeCycleEventType.DOM_MUTATED, function () { return notifyPageActivity(); }));\n    subscriptions.push(lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRY_COLLECTED, function (entry) {\n        if (entry.entryType !== 'resource') {\n            return;\n        }\n        notifyPageActivity();\n    }));\n    subscriptions.push(lifeCycle.subscribe(LifeCycleEventType.REQUEST_STARTED, function (startEvent) {\n        if (firstRequestId === undefined) {\n            firstRequestId = startEvent.requestId;\n        }\n        pendingRequestsCount += 1;\n        notifyPageActivity();\n    }));\n    subscriptions.push(lifeCycle.subscribe(LifeCycleEventType.REQUEST_COMPLETED, function (request) {\n        // If the request started before the tracking start, ignore it\n        if (firstRequestId === undefined || request.requestId < firstRequestId) {\n            return;\n        }\n        pendingRequestsCount -= 1;\n        notifyPageActivity();\n    }));\n    function notifyPageActivity() {\n        observable.notify({ isBusy: pendingRequestsCount > 0 });\n    }\n    return {\n        observable: observable,\n        stop: function () {\n            subscriptions.forEach(function (s) { return s.unsubscribe(); });\n        },\n    };\n}\nexport function waitPageActivitiesCompletion(pageActivitiesObservable, stopPageActivitiesTracking, completionCallback) {\n    var idleTimeoutId;\n    var hasCompleted = false;\n    var validationTimeoutId = setTimeout(monitor(function () { return complete(false, 0); }), PAGE_ACTIVITY_VALIDATION_DELAY);\n    var maxDurationTimeoutId = setTimeout(monitor(function () { return complete(true, performance.now()); }), PAGE_ACTIVITY_MAX_DURATION);\n    pageActivitiesObservable.subscribe(function (_a) {\n        var isBusy = _a.isBusy;\n        clearTimeout(validationTimeoutId);\n        clearTimeout(idleTimeoutId);\n        var lastChangeTime = performance.now();\n        if (!isBusy) {\n            idleTimeoutId = setTimeout(monitor(function () { return complete(true, lastChangeTime); }), PAGE_ACTIVITY_END_DELAY);\n        }\n    });\n    function stop() {\n        hasCompleted = true;\n        clearTimeout(validationTimeoutId);\n        clearTimeout(idleTimeoutId);\n        clearTimeout(maxDurationTimeoutId);\n        stopPageActivitiesTracking();\n    }\n    function complete(hadActivity, endTime) {\n        if (hasCompleted) {\n            return;\n        }\n        stop();\n        completionCallback(hadActivity, endTime);\n    }\n    return { stop: stop };\n}\n//# sourceMappingURL=trackPageActivities.js.map"]},"metadata":{},"sourceType":"module"}