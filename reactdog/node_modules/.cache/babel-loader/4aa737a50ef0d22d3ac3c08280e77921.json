{"ast":null,"code":"import { monitor } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\n\nfunction getMutationObserverConstructor() {\n  var constructor;\n  var browserWindow = window; // Angular uses Zone.js to provide a context persisting accross async tasks.  Zone.js replaces the\n  // global MutationObserver constructor with a patched version to support the context propagation.\n  // There is an ongoing issue[1][2] with this setup when using a MutationObserver within a Angular\n  // component: on some occasions, the callback is being called in an infinite loop, causing the\n  // page to freeze (even if the callback is completely empty).\n  //\n  // To work around this issue, we are using the Zone __symbol__ API to get the original, unpatched\n  // MutationObserver constructor.\n  //\n  // [1] https://github.com/angular/angular/issues/26948\n  // [2] https://github.com/angular/angular/issues/31712\n\n  if (browserWindow.Zone) {\n    var symbol = browserWindow.Zone.__symbol__('MutationObserver');\n\n    constructor = browserWindow[symbol];\n  }\n\n  if (!constructor) {\n    constructor = browserWindow.MutationObserver;\n  }\n\n  return constructor;\n}\n\nexport function startDOMMutationCollection(lifeCycle) {\n  var observer;\n  var MutationObserver = getMutationObserverConstructor();\n\n  if (MutationObserver) {\n    observer = new MutationObserver(monitor(function () {\n      lifeCycle.notify(LifeCycleEventType.DOM_MUTATED);\n    }));\n    observer.observe(document.documentElement, {\n      attributes: true,\n      characterData: true,\n      childList: true,\n      subtree: true\n    });\n  }\n\n  return {\n    stop: function () {\n      if (observer) {\n        observer.disconnect();\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../src/domMutationCollection.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,uBAAxB;AACA,SAAoB,kBAApB,QAA8C,aAA9C;;AAWA,SAAS,8BAAT,GAAuC;AACrC,MAAI,WAAJ;AACA,MAAM,aAAa,GAAkB,MAArC,CAFqC,CAIrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI,aAAa,CAAC,IAAlB,EAAwB;AACtB,QAAM,MAAM,GAAG,aAAa,CAAC,IAAd,CAAmB,UAAnB,CAA8B,kBAA9B,CAAf;;AACA,IAAA,WAAW,GAAG,aAAa,CAAC,MAAD,CAA3B;AACD;;AAED,MAAI,CAAC,WAAL,EAAkB;AAChB,IAAA,WAAW,GAAG,aAAa,CAAC,gBAA5B;AACD;;AAED,SAAO,WAAP;AACD;;AAED,OAAM,SAAU,0BAAV,CAAqC,SAArC,EAAyD;AAC7D,MAAI,QAAJ;AACA,MAAM,gBAAgB,GAAG,8BAA8B,EAAvD;;AACA,MAAI,gBAAJ,EAAsB;AACpB,IAAA,QAAQ,GAAG,IAAI,gBAAJ,CACT,OAAO,CAAC,YAAA;AACN,MAAA,SAAS,CAAC,MAAV,CAAiB,kBAAkB,CAAC,WAApC;AACD,KAFM,CADE,CAAX;AAMA,IAAA,QAAQ,CAAC,OAAT,CAAiB,QAAQ,CAAC,eAA1B,EAA2C;AACzC,MAAA,UAAU,EAAE,IAD6B;AAEzC,MAAA,aAAa,EAAE,IAF0B;AAGzC,MAAA,SAAS,EAAE,IAH8B;AAIzC,MAAA,OAAO,EAAE;AAJgC,KAA3C;AAMD;;AAED,SAAO;AACL,IAAA,IAAI,EAAA,YAAA;AACF,UAAI,QAAJ,EAAc;AACZ,QAAA,QAAQ,CAAC,UAAT;AACD;AACF;AALI,GAAP;AAOD","sourceRoot":"","sourcesContent":["import { monitor } from '@datadog/browser-core';\nimport { LifeCycleEventType } from './lifeCycle';\nfunction getMutationObserverConstructor() {\n    var constructor;\n    var browserWindow = window;\n    // Angular uses Zone.js to provide a context persisting accross async tasks.  Zone.js replaces the\n    // global MutationObserver constructor with a patched version to support the context propagation.\n    // There is an ongoing issue[1][2] with this setup when using a MutationObserver within a Angular\n    // component: on some occasions, the callback is being called in an infinite loop, causing the\n    // page to freeze (even if the callback is completely empty).\n    //\n    // To work around this issue, we are using the Zone __symbol__ API to get the original, unpatched\n    // MutationObserver constructor.\n    //\n    // [1] https://github.com/angular/angular/issues/26948\n    // [2] https://github.com/angular/angular/issues/31712\n    if (browserWindow.Zone) {\n        var symbol = browserWindow.Zone.__symbol__('MutationObserver');\n        constructor = browserWindow[symbol];\n    }\n    if (!constructor) {\n        constructor = browserWindow.MutationObserver;\n    }\n    return constructor;\n}\nexport function startDOMMutationCollection(lifeCycle) {\n    var observer;\n    var MutationObserver = getMutationObserverConstructor();\n    if (MutationObserver) {\n        observer = new MutationObserver(monitor(function () {\n            lifeCycle.notify(LifeCycleEventType.DOM_MUTATED);\n        }));\n        observer.observe(document.documentElement, {\n            attributes: true,\n            characterData: true,\n            childList: true,\n            subtree: true,\n        });\n    }\n    return {\n        stop: function () {\n            if (observer) {\n                observer.disconnect();\n            }\n        },\n    };\n}\n//# sourceMappingURL=domMutationCollection.js.map"]},"metadata":{},"sourceType":"module"}