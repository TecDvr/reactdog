{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { assign, checkCookiesAuthorized, checkIsNotLocalFile, commonInit, getGlobalObject, isPercentage, makeGlobal, makeStub, monitor, startRequestCollection } from '@datadog/browser-core';\nimport { buildEnv } from './buildEnv';\nimport { startDOMMutationCollection } from './domMutationCollection';\nimport { LifeCycle, LifeCycleEventType } from './lifeCycle';\nimport { startPerformanceCollection } from './performanceCollection';\nimport { startRum } from './rum';\nimport { startRumSession } from './rumSession';\nimport { startUserActionCollection } from './userActionCollection';\nimport { startViewCollection } from './viewCollection';\nvar STUBBED_RUM = {\n  init: function (userConfiguration) {\n    makeStub('core.init');\n  },\n  addRumGlobalContext: function (key, value) {\n    makeStub('addRumGlobalContext');\n  },\n  setRumGlobalContext: function (context) {\n    makeStub('setRumGlobalContext');\n  },\n  addUserAction: function (name, context) {\n    makeStub('addUserAction');\n  },\n  getInternalContext: function () {\n    makeStub('getInternalContext');\n    return undefined;\n  }\n};\nexport var datadogRum = makeGlobal(STUBBED_RUM);\nvar isAlreadyInitialized = false;\ndatadogRum.init = monitor(function (userConfiguration) {\n  if (!checkCookiesAuthorized() || !checkIsNotLocalFile() || !canInitRum(userConfiguration)) {\n    return;\n  }\n\n  if (userConfiguration.publicApiKey) {\n    userConfiguration.clientToken = userConfiguration.publicApiKey;\n  }\n\n  var rumUserConfiguration = __assign(__assign({}, userConfiguration), {\n    isCollectingError: true\n  });\n\n  var lifeCycle = new LifeCycle();\n\n  var _a = commonInit(rumUserConfiguration, buildEnv),\n      errorObservable = _a.errorObservable,\n      configuration = _a.configuration,\n      internalMonitoring = _a.internalMonitoring;\n\n  var session = startRumSession(configuration, lifeCycle);\n  var globalApi = startRum(rumUserConfiguration.applicationId, lifeCycle, configuration, session, internalMonitoring);\n  startViewCollection(location, lifeCycle, session);\n\n  var _b = startRequestCollection(),\n      requestStartObservable = _b[0],\n      requestCompleteObservable = _b[1];\n\n  startPerformanceCollection(lifeCycle, session);\n  startDOMMutationCollection(lifeCycle);\n\n  if (configuration.isEnabled('collect-user-actions')) {\n    startUserActionCollection(lifeCycle);\n  }\n\n  errorObservable.subscribe(function (errorMessage) {\n    return lifeCycle.notify(LifeCycleEventType.ERROR_COLLECTED, errorMessage);\n  });\n  requestStartObservable.subscribe(function (startEvent) {\n    return lifeCycle.notify(LifeCycleEventType.REQUEST_STARTED, startEvent);\n  });\n  requestCompleteObservable.subscribe(function (request) {\n    return lifeCycle.notify(LifeCycleEventType.REQUEST_COMPLETED, request);\n  });\n  assign(datadogRum, globalApi);\n  isAlreadyInitialized = true;\n});\n\nfunction canInitRum(userConfiguration) {\n  if (isAlreadyInitialized) {\n    if (!userConfiguration.silentMultipleInit) {\n      console.error('DD_RUM is already initialized.');\n    }\n\n    return false;\n  }\n\n  if (!userConfiguration || !userConfiguration.clientToken && !userConfiguration.publicApiKey) {\n    console.error('Client Token is not configured, we will not send any data.');\n    return false;\n  }\n\n  if (!userConfiguration.applicationId) {\n    console.error('Application ID is not configured, no RUM data will be collected.');\n    return false;\n  }\n\n  if (userConfiguration.sampleRate !== undefined && !isPercentage(userConfiguration.sampleRate)) {\n    console.error('Sample Rate should be a number between 0 and 100');\n    return false;\n  }\n\n  if (userConfiguration.resourceSampleRate !== undefined && !isPercentage(userConfiguration.resourceSampleRate)) {\n    console.error('Resource Sample Rate should be a number between 0 and 100');\n    return false;\n  }\n\n  return true;\n}\n\ngetGlobalObject().DD_RUM = datadogRum;","map":{"version":3,"sources":["../src/rum.entry.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __assign } from \"tslib\";\nimport { assign, checkCookiesAuthorized, checkIsNotLocalFile, commonInit, getGlobalObject, isPercentage, makeGlobal, makeStub, monitor, startRequestCollection, } from '@datadog/browser-core';\nimport { buildEnv } from './buildEnv';\nimport { startDOMMutationCollection } from './domMutationCollection';\nimport { LifeCycle, LifeCycleEventType } from './lifeCycle';\nimport { startPerformanceCollection } from './performanceCollection';\nimport { startRum } from './rum';\nimport { startRumSession } from './rumSession';\nimport { startUserActionCollection } from './userActionCollection';\nimport { startViewCollection } from './viewCollection';\nvar STUBBED_RUM = {\n    init: function (userConfiguration) {\n        makeStub('core.init');\n    },\n    addRumGlobalContext: function (key, value) {\n        makeStub('addRumGlobalContext');\n    },\n    setRumGlobalContext: function (context) {\n        makeStub('setRumGlobalContext');\n    },\n    addUserAction: function (name, context) {\n        makeStub('addUserAction');\n    },\n    getInternalContext: function () {\n        makeStub('getInternalContext');\n        return undefined;\n    },\n};\nexport var datadogRum = makeGlobal(STUBBED_RUM);\nvar isAlreadyInitialized = false;\ndatadogRum.init = monitor(function (userConfiguration) {\n    if (!checkCookiesAuthorized() || !checkIsNotLocalFile() || !canInitRum(userConfiguration)) {\n        return;\n    }\n    if (userConfiguration.publicApiKey) {\n        userConfiguration.clientToken = userConfiguration.publicApiKey;\n    }\n    var rumUserConfiguration = __assign(__assign({}, userConfiguration), { isCollectingError: true });\n    var lifeCycle = new LifeCycle();\n    var _a = commonInit(rumUserConfiguration, buildEnv), errorObservable = _a.errorObservable, configuration = _a.configuration, internalMonitoring = _a.internalMonitoring;\n    var session = startRumSession(configuration, lifeCycle);\n    var globalApi = startRum(rumUserConfiguration.applicationId, lifeCycle, configuration, session, internalMonitoring);\n    startViewCollection(location, lifeCycle, session);\n    var _b = startRequestCollection(), requestStartObservable = _b[0], requestCompleteObservable = _b[1];\n    startPerformanceCollection(lifeCycle, session);\n    startDOMMutationCollection(lifeCycle);\n    if (configuration.isEnabled('collect-user-actions')) {\n        startUserActionCollection(lifeCycle);\n    }\n    errorObservable.subscribe(function (errorMessage) { return lifeCycle.notify(LifeCycleEventType.ERROR_COLLECTED, errorMessage); });\n    requestStartObservable.subscribe(function (startEvent) { return lifeCycle.notify(LifeCycleEventType.REQUEST_STARTED, startEvent); });\n    requestCompleteObservable.subscribe(function (request) { return lifeCycle.notify(LifeCycleEventType.REQUEST_COMPLETED, request); });\n    assign(datadogRum, globalApi);\n    isAlreadyInitialized = true;\n});\nfunction canInitRum(userConfiguration) {\n    if (isAlreadyInitialized) {\n        if (!userConfiguration.silentMultipleInit) {\n            console.error('DD_RUM is already initialized.');\n        }\n        return false;\n    }\n    if (!userConfiguration || (!userConfiguration.clientToken && !userConfiguration.publicApiKey)) {\n        console.error('Client Token is not configured, we will not send any data.');\n        return false;\n    }\n    if (!userConfiguration.applicationId) {\n        console.error('Application ID is not configured, no RUM data will be collected.');\n        return false;\n    }\n    if (userConfiguration.sampleRate !== undefined && !isPercentage(userConfiguration.sampleRate)) {\n        console.error('Sample Rate should be a number between 0 and 100');\n        return false;\n    }\n    if (userConfiguration.resourceSampleRate !== undefined && !isPercentage(userConfiguration.resourceSampleRate)) {\n        console.error('Resource Sample Rate should be a number between 0 and 100');\n        return false;\n    }\n    return true;\n}\ngetGlobalObject().DD_RUM = datadogRum;\n//# sourceMappingURL=rum.entry.js.map"]},"metadata":{},"sourceType":"module"}